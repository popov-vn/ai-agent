import asyncio
import json
import logging
import os
import time
import traceback
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Dict, List, Optional, Any, Union
from enum import Enum
from openai import OpenAI

import aiohttp
from pydantic import BaseModel, Field, validator
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Jupyter
    ]
)
logger = logging.getLogger(__name__)
logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

"""
–Ø—á–µ–π–∫–∞ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
–°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
"""

class AgentType(Enum):
    """–¢–∏–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    PRAKTIK_BOT = "praktik_bot"           # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–ª—å–∑—É
    FIN_EXPERT = "fin_expert"             # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
    WOW_FACTOR = "wow_factor"             # –ò—â–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    UNIVERSAL_GURU = "universal_guru"     # –ò—â–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
    SURPRISE_MASTER = "surprise_master"   # –ò—â–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
    PROF_ROST = "prof_rost"              # –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏

print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(AgentType)} —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤:")
for agent_type in AgentType:
    print(f"  - {agent_type.value}")
    
    
"""
–Ø—á–µ–π–∫–∞ 3: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
"""

class GiftModel(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ–ª–µ–π"""
    –ø–æ–¥–∞—Ä–æ–∫: str = Field(..., min_length=1, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
    –æ–ø–∏—Å–∞–Ω–∏–µ: str = Field(..., min_length=1, max_length=500, description="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
    —Å—Ç–æ–∏–º–æ—Å—Ç—å: str = Field(..., min_length=1, max_length=50, description="–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: int = Field(..., ge=1, le=10, description="–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10")
    query: str = Field(..., min_length=0, description="query")

    @validator('—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å')
    def validate_relevance(cls, v):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å - —ç—Ç–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10"""
        if not isinstance(v, int):
            try:
                return int(float(v))
            except (ValueError, TypeError):
                raise ValueError('–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10')
        return v

class AgentResponseModel(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –ò–ò-–∞–≥–µ–Ω—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    –≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫: str = Field(..., min_length=1)
    –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: str = Field(..., min_length=0)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
    –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_—Ü–µ–Ω–Ω–æ—Å—Ç–∏: Optional[int] = Field(None, ge=0, le=100)
    roi_–∏–Ω–¥–µ–∫—Å: Optional[float] = Field(None, ge=0)
    —Å—Ç–µ–ø–µ–Ω—å_–≤–æ—Å—Ç–æ—Ä–≥–∞_–ø—Ä–æ—Ü–µ–Ω—Ç: Optional[int] = Field(None, ge=0, le=100)
    –ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: Optional[int] = Field(None, ge=0, le=100)
    —à–∞–Ω—Å_–∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è_–ø—Ä–æ—Ü–µ–Ω—Ç: Optional[int] = Field(None, ge=0, le=100)
    –ø—Ä–æ–≥–Ω–æ–∑_—Ä–æ—Å—Ç–∞_—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ–Ω—Ç: Optional[int] = Field(None, ge=0, le=100)

class PersonInfoModel(BaseModel):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π"""
    info: str = Field(..., min_length=10, max_length=2000)
    
    @validator('info')
    def validate_person_info(cls, v):
        """–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        dangerous_patterns = ['<script', 'javascript:', 'eval(', 'exec(', 'import(']
        v_lower = v.lower()
        for pattern in dangerous_patterns:
            if pattern in v_lower:
                raise ValueError(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {pattern}')
        return v.strip()

print("‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Å–æ–∑–¥–∞–Ω—ã")

"""
–Ø—á–µ–π–∫–∞ 4: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API, –ª–∏–º–∏—Ç—ã, —Ç–∞–π–º–∞—É—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
"""

@dataclass
class Configuration:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    api_token: str                              # API —Ç–æ–∫–µ–Ω –¥–ª—è OpenRouter
    base_url: str = "https://openrouter.ai/api/v1"  # –ë–∞–∑–æ–≤—ã–π URL API
    model: str = "google/gemini-2.5-flash-preview:thinking"  # –ú–æ–¥–µ–ª—å –ò–ò
    max_retries: int = 3                        # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    retry_delay: float = 2.0                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)
    request_timeout: int = 30                   # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ–∫)
    max_concurrent_requests: int = 6            # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    @classmethod
    def from_env(cls) -> 'Configuration':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        token = os.getenv("OPEN_API_TOKEN")
        if not token:
            raise ValueError("‚ùå OPEN_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        config = cls(
            api_token=token,
            base_url=os.getenv("OPENROUTER_BASE_URL", cls.base_url),
            model=os.getenv("OPENROUTER_MODEL", cls.model),
            max_retries=int(os.getenv("MAX_RETRIES", cls.max_retries)),
            retry_delay=float(os.getenv("RETRY_DELAY", cls.retry_delay)),
            request_timeout=int(os.getenv("REQUEST_TIMEOUT", cls.request_timeout)),
            max_concurrent_requests=int(os.getenv("MAX_CONCURRENT_REQUESTS", cls.max_concurrent_requests))
        )
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        print(f"  - –ú–æ–¥–µ–ª—å: {config.model}")
        print(f"  - –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {config.max_concurrent_requests}")
        print(f"  - –¢–∞–π–º–∞—É—Ç: {config.request_timeout}—Å")
        
        return config

print("‚úÖ –ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤")

"""
–Ø—á–µ–π–∫–∞ 5: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON –æ—Ç–≤–µ—Ç–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π ast.literal_eval –Ω–∞ json.loads —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

class JSONParser:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò –º–æ–¥–µ–ª–µ–π
    –£—Å—Ç—Ä–∞–Ω—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    """
    
    @staticmethod
    def parse_json_response(response: str) -> Dict[str, Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
        
        Args:
            response: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –º–æ–¥–µ–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            
        Raises:
            ValueError: –ï—Å–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_response = response.strip()
            
            # –®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ markdown —Ä–∞–∑–º–µ—Ç–∫–∏
            if "```json" in clean_response:
                parts = clean_response.split("```json")
                if len(parts) > 1:
                    clean_response = parts[1].split("```")[0].strip()
            elif "```" in clean_response:
                parts = clean_response.split("```")
                if len(parts) > 1:
                    clean_response = parts[1].split("```")[0].strip()
            
            # –®–∞–≥ 3: –ü–æ–∏—Å–∫ JSON –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ (—É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
            json_str = clean_response
            
            # –ò—â–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
            start_idx = clean_response.find('{')
            if start_idx != -1:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                brace_count = 0
                end_idx = -1
                
                for i in range(start_idx, len(clean_response)):
                    if clean_response[i] == '{':
                        brace_count += 1
                    elif clean_response[i] == '}':
                        brace_count -= 1
                        if brace_count == 0:
                            end_idx = i
                            break
                
                if end_idx != -1:
                    json_str = clean_response[start_idx:end_idx + 1]
            
            # –®–∞–≥ 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ JSON —Å—Ç—Ä–æ–∫–∏
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫
            json_str = json_str.replace('\n', ' ').replace('\r', ' ')
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
            import re
            json_str = re.sub(r'\s+', ' ', json_str)
            
            # –®–∞–≥ 5: –ë–ï–ó–û–ü–ê–°–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ json.loads
            parsed_data = json.loads(json_str)
            
            # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not isinstance(parsed_data, dict):
                raise ValueError("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º (—Å–ª–æ–≤–∞—Ä–µ–º)")
            
            logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, –ø–æ–ª–µ–π: {len(parsed_data)}")
            return parsed_data
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
            logger.error(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {response[:500]}...")
            logger.error(f"üîç –û—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {json_str[:500] if 'json_str' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}...")
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ: {str(e)}")
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
            logger.error(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç: {response[:200]}...")
            raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
    
    @staticmethod
    def parse_json_array(response: str) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ JSON –º–∞—Å—Å–∏–≤–∞ (–¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤) - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        Args:
            response: –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π JSON –º–∞—Å—Å–∏–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        """
        try:
            clean_response = response.strip()
            
            # –£–¥–∞–ª–µ–Ω–∏–µ markdown —Ä–∞–∑–º–µ—Ç–∫–∏
            if "```json" in clean_response:
                clean_response = clean_response.split("```json")[1].split("```")[0].strip()
            elif "```" in clean_response:
                clean_response = clean_response.split("```")[1].split("```")[0].strip()
            
            # –ü–æ–∏—Å–∫ JSON –º–∞—Å—Å–∏–≤–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            start_idx = clean_response.find('[')
            if start_idx != -1:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                bracket_count = 0
                end_idx = -1
                
                for i in range(start_idx, len(clean_response)):
                    if clean_response[i] == '[':
                        bracket_count += 1
                    elif clean_response[i] == ']':
                        bracket_count -= 1
                        if bracket_count == 0:
                            end_idx = i
                            break
                
                if end_idx != -1:
                    json_str = clean_response[start_idx:end_idx + 1]
                else:
                    json_str = clean_response
            else:
                json_str = clean_response
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
            json_str = json_str.replace('\n', ' ').replace('\r', ' ')
            import re
            json_str = re.sub(r'\s+', ' ', json_str)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Å—Å–∏–≤–∞
            parsed_data = json.loads(json_str)
            
            if not isinstance(parsed_data, list):
                raise ValueError("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON –º–∞—Å—Å–∏–≤–æ–º")
            
            logger.info(f"‚úÖ JSON –º–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(parsed_data)}")
            return parsed_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –º–∞—Å—Å–∏–≤–∞: {str(e)}")
            print(traceback.format_exc())
            logger.error(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –º–∞—Å—Å–∏–≤: {str(e)}")

print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π JSON –ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤")


"""
–Ø—á–µ–π–∫–∞ 6: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å KeyError –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫
"""

class PromptTemplate:
    """–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
    GIFT_GENERATION_PROMPT = """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–¥–∞—Ä–∫–æ–≤. –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ –ø—Ä–µ–¥–ª–æ–∂–∏ 10 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
{{
  "–ø–æ–¥–∞—Ä–æ–∫": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞",
  "–æ–ø–∏—Å–∞–Ω–∏–µ": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞", 
  "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–º–∏–Ω–∏–º—É–º - –º–∞–∫—Å–∏–º—É–º'",
  "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_10,
  "query" : "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–µ"
}}

‚ùó –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤–æ–º –∏–∑ 10 –ø–æ–¥–∞—Ä–∫–æ–≤
"""

    @staticmethod
    def get_agent_prompt(agent_type: AgentType, person_info: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞ (–ë–ï–ó —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ JSON –ø—Ä–∏–º–µ—Ä–∞—Ö)
        if agent_type == AgentType.PRAKTIK_BOT:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –ü—Ä–∞–∫—Ç–∏–∫–ë–æ—Ç - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.


–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
{{
 "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
 "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª—å–∑—ã  
 "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_—Ü–µ–Ω–Ω–æ—Å—Ç–∏": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
 }}
"""

        elif agent_type == AgentType.FIN_EXPERT:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –§–∏–Ω–≠–∫—Å–ø–µ—Ä—Ç - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫ —Å –ª—É—á—à–∏–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
{{
  "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞,
  "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏,
  "roi_–∏–Ω–¥–µ–∫—Å": —á–∏—Å–ª–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
}}
"""

        elif agent_type == AgentType.WOW_FACTOR:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –í–∞—É–§–∞–∫—Ç–æ—Ä - –∏—â–µ—à—å –ø–æ–¥–∞—Ä–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ—Ç–∫–ª–∏–∫–æ–º.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ—Å—Ç–æ—Ä–≥.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
{{
 "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞,
 "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è,
 "—Å—Ç–µ–ø–µ–Ω—å_–≤–æ—Å—Ç–æ—Ä–≥–∞_–ø—Ä–æ—Ü–µ–Ω—Ç": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
}}
"""

        elif agent_type == AgentType.UNIVERSAL_GURU:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –£–Ω–∏–≤–µ—Ä—Å–∞–ª–ì—É—Ä—É - –∏—â–µ—à—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏—Ç—É–∞—Ü–∏–π.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
{{
 "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞,
 "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è,
 "–ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
}}
"""

        elif agent_type == AgentType.SURPRISE_MASTER:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –°—é—Ä–ø—Ä–∏–∑–ú–∞—Å—Ç–µ—Ä - –∏—â–µ—à—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù —Å–∞–º—ã–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –ø–æ–¥–∞—Ä–æ–∫.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º–æ—Å—Ç–∏
- "—à–∞–Ω—Å_–∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è_–ø—Ä–æ—Ü–µ–Ω—Ç": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
"""

        elif agent_type == AgentType.PROF_ROST:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –ü—Ä–æ—Ñ–†–æ—Å—Ç - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –ø–æ–¥–∞—Ä–∫–∞—Ö –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π –¥–ª—è –∫–∞—Ä—å–µ—Ä—ã.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
{{
 "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞,
 "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è,
 "–ø—Ä–æ–≥–Ω–æ–∑_—Ä–æ—Å—Ç–∞_—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ–Ω—Ç": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
}}
"""
        
        else:
            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

–í—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫ –∏ –æ—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
- "–æ—Ü–µ–Ω–∫–∞": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
"""

print("‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≥–æ—Ç–æ–≤—ã")


"""
–Ø—á–µ–π–∫–∞ 7.0 Class –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å openrouter
"""

class OpenRouterClient:
    def __init__(self, config: Configuration):
        self.config = config
        self.session: Optional[aiohttp.ClientSession] = None
        # –°–µ–º–∞—Ñ–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._semaphore = asyncio.Semaphore(config.max_concurrent_requests)
        self.logger = logging.getLogger("OpenRouterClient")
        
        self.client = OpenAI(
            base_url=self.config.base_url,
            api_key=self.config.api_token,
        )
    
    async def __aenter__(self):
        print("dumb enter")
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        print("dumb exit")
        
    async def make_request(self, prompt: str) -> str:
        async with self._semaphore:
            start_time = time.time()
            for attempt in range(self.config.max_retries):
                try:
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API #{attempt+1}...")
                    completion = self.client.chat.completions.create(
                        extra_headers={
                            "HTTP-Referer": "https://github.com", 
                            "X-Title": "Gift Recommendation Agent", 
                        },
                        #model="qwen/qwen3-235b-a22b:free",
                        model=self.config.model,
                        #"google/gemini-2.5-flash-preview:thinking",
                        #model="deepseek/deepseek-r1",
                        messages=[
                            {
                                "role": "user",
                                "content": prompt
                            }
                        ]
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞
                    if completion and hasattr(completion, 'choices') and completion.choices and hasattr(completion.choices[0], 'message') and completion.choices[0].message and hasattr(completion.choices[0].message, 'content'):
                        answer = completion.choices[0].message.content
                        
                        analysis_time = time.time() - start_time
                        self.logger.info(f"‚è±Ô∏è OpenRouter –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.2f} —Å–µ–∫—É–Ω–¥")
                        
                        print(f"OpenRouter response: {answer}")
                        return  answer
                    else:
                        print(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                        time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ API: {str(e)}")
                    print(traceback.format_exc())
                    time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
        print("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
        return '{"error": "API request failed"}'        

"""
–Ø—á–µ–π–∫–∞ 7: HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å connection pooling –∏ retry –ª–æ–≥–∏–∫–æ–π
"""

class APIClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫ –∏ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
    
    def __init__(self, config: Configuration):
        self.config = config
        self.session: Optional[aiohttp.ClientSession] = None
        # –°–µ–º–∞—Ñ–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._semaphore = asyncio.Semaphore(config.max_concurrent_requests)
        self.logger = logging.getLogger("APIClient")
    
    async def __aenter__(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ async context manager"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ connection pool –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connector = aiohttp.TCPConnector(
            ssl=True,           # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SSL
            limit=100,          # –û–±—â–∏–π –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            limit_per_host=10   # –õ–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        timeout = aiohttp.ClientTimeout(total=self.config.request_timeout)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={
                "Authorization": f"Bearer {self.config.api_token}",
                "HTTP-Referer": "https://github.com",
                "X-Title": "Gift Recommendation Agent",
                "Content-Type": "application/json"
            }
        )
        self.logger.info("üîó HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ context manager"""
        if self.session:
            await self.session.close()
            self.logger.info("üîå HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    
    async def make_request(self, prompt: str) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π –∏ exponential backoff
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ò–ò
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç –ò–ò –º–æ–¥–µ–ª–∏
            
        Raises:
            Exception: –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—É–¥–∞—á–Ω—ã
        """
        
        self.logger.info(f"üîÑ API –∑–∞–ø—Ä–æ—Å, prompt {prompt}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async with self._semaphore:
            for attempt in range(self.config.max_retries):
                try:
                    self.logger.info(f"üîÑ API –∑–∞–ø—Ä–æ—Å {self.config.base_url}")
                    self.logger.info(f"üîÑ API –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.max_retries}")
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload –¥–ª—è OpenRouter API
                    payload = {
                        "model": self.config.model,
                        "messages": [{"role": "user", "content": prompt}]
                    }
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP POST –∑–∞–ø—Ä–æ—Å–∞
                    async with self.session.post(
                        f"{self.config.base_url}/chat/completions",
                        json=payload
                    ) as response:
                        
                        if response.status == 200:
                            data = await response.json()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                            if (data.get("choices") and 
                                len(data["choices"]) > 0 and 
                                data["choices"][0].get("message", {}).get("content")):
                                
                                content = data["choices"][0]["message"]["content"]
                                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç {content}")
                                return content
                        
                        self.logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        
                except asyncio.TimeoutError:
                    self.logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
                
                # Exponential backoff: –∑–∞–¥–µ—Ä–∂–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if attempt < self.config.max_retries - 1:
                    delay = self.config.retry_delay * (2 ** attempt)
                    self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                    await asyncio.sleep(delay)
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            error_msg = f"API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {self.config.max_retries} –ø–æ–ø—ã—Ç–æ–∫"
            self.logger.error(f"üí• {error_msg}")
            raise Exception(error_msg)

print("‚úÖ API –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

"""
–Ø—á–µ–π–∫–∞ 8: –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
–£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
"""

class Agent(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, agent_type: AgentType, api_client: OpenRouterClient):
        self.agent_type = agent_type
        self.api_client = api_client
        self.logger = logging.getLogger(f"Agent.{agent_type.value}")
    
    @abstractmethod
    async def analyze_gifts(self, person_info: str, gifts_data: List[GiftModel]) -> AgentResponseModel:
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        pass
    
    def format_gifts_for_prompt(self, gifts: List[GiftModel]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        formatted_text = ""
        for i, gift in enumerate(gifts, 1):
            formatted_text += (
                f"{i}. {gift.–ø–æ–¥–∞—Ä–æ–∫} - {gift.–æ–ø–∏—Å–∞–Ω–∏–µ} - "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {gift.—Å—Ç–æ–∏–º–æ—Å—Ç—å}‚ÇΩ - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {gift.—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å}/10\n"
            )
        return formatted_text

class SpecializedAgent(Agent):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    async def analyze_gifts(self, person_info: str, gifts_data: List[GiftModel]) -> AgentResponseModel:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–º–ø—Ç–æ–≤"""
        try:
            self.logger.info(f"üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç–æ–º {self.agent_type.value}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            formatted_gifts = self.format_gifts_for_prompt(gifts_data)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –±–µ–∑ –≤—ã–∑–æ–≤–∞ .format()
            base_prompt = PromptTemplate.get_agent_prompt(self.agent_type, person_info)
            
            # –ó–∞–º–µ–Ω—è–µ–º {gifts} –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
            prompt = base_prompt.replace("{gifts}", formatted_gifts)
            
            self.logger.info(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç—É {self.agent_type.value}")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            response = await self.api_client.make_request(prompt)
            
            # –û–¢–õ–ê–î–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {self.agent_type.value}: {response[:300]}...")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç—É—é –æ—á–∏—Å—Ç–∫—É
            cleaned_response = response.strip()
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON
            if not cleaned_response.startswith('{'):
                self.logger.warning(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {{, –∏—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ...")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –æ–±—ä–µ–∫—Ç –≤ –æ—Ç–≤–µ—Ç–µ
                start_idx = cleaned_response.find('{')
                end_idx = cleaned_response.rfind('}')
                
                if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
                    cleaned_response = cleaned_response[start_idx:end_idx + 1]
                    self.logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω JSON: {cleaned_response}")
                else:
                    self.logger.error(f"‚ùå JSON –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                    raise ValueError("JSON –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
            try:
                parsed_response = JSONParser.parse_json_response(cleaned_response)
            except Exception as parse_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {self.agent_type.value}: {parse_error}")
                self.logger.error(f"üîç –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å: {cleaned_response[:200]}...")
                raise parse_error
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Pydantic –º–æ–¥–µ–ª—å
            validated_response = AgentResponseModel(**parsed_response)
            
            self.logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {self.agent_type.value} –≤—ã–±—Ä–∞–ª: {validated_response.–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫}")
            return validated_response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ {self.agent_type.value}: {str(e)}")
            traceback.print_exc()
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
            return self._get_fallback_response(gifts_data)
    
    def _get_fallback_response(self, gifts_data: List[GiftModel]) -> AgentResponseModel:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        if not gifts_data:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è fallback –æ—Ç–≤–µ—Ç–∞")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        fallback_gift = gifts_data[0]
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        fallback_responses = {
            AgentType.PRAKTIK_BOT: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift.–ø–æ–¥–∞—Ä–æ–∫,
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–í—ã—Å–æ–∫–∞—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_—Ü–µ–Ω–Ω–æ—Å—Ç–∏": 75
            },
            AgentType.FIN_EXPERT: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift.–ø–æ–¥–∞—Ä–æ–∫,
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "roi_–∏–Ω–¥–µ–∫—Å": 2.5
            },
            AgentType.WOW_FACTOR: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift.–ø–æ–¥–∞—Ä–æ–∫,
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–í—ã—Å–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "—Å—Ç–µ–ø–µ–Ω—å_–≤–æ—Å—Ç–æ—Ä–≥–∞_–ø—Ä–æ—Ü–µ–Ω—Ç": 80
            },
            AgentType.UNIVERSAL_GURU: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift.–ø–æ–¥–∞—Ä–æ–∫,
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "–ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": 70
            },
            AgentType.SURPRISE_MASTER: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift.–ø–æ–¥–∞—Ä–æ–∫,
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –≤—ã–±–æ—Ä (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "—à–∞–Ω—Å_–∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è_–ø—Ä–æ—Ü–µ–Ω—Ç": 75
            },
            AgentType.PROF_ROST: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift.–ø–æ–¥–∞—Ä–æ–∫,
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–°–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "–ø—Ä–æ–≥–Ω–æ–∑_—Ä–æ—Å—Ç–∞_—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ–Ω—Ç": 65
            }
        }
        
        self.logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {self.agent_type.value}")
        return AgentResponseModel(**fallback_responses[self.agent_type])

print("‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∞–≥–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã")

"""
–Ø—á–µ–π–∫–∞ 9: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ
"""

class GiftGenerator:
   """
   –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ
   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   """
   
   def __init__(self, api_client: OpenRouterClient):
       self.api_client = api_client
       self.logger = logging.getLogger("GiftGenerator")
   
   async def generate_gifts(self, person_info: str) -> List[GiftModel]:
       """
       –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ
       
       Args:
           person_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ (–∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ö–æ–±–±–∏, —Ä–∞–±–æ—Ç–∞ –∏ —Ç.–¥.)
           
       Returns:
           –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤
       """
       try:
           self.logger.info("üéÅ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤")
           
           # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
           validated_person_info = PersonInfoModel(info=person_info)
           
           # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
           prompt = PromptTemplate.GIFT_GENERATION_PROMPT.format(
               person_info=validated_person_info.info
           )
           
           # –ó–∞–ø—Ä–æ—Å –∫ –ò–ò –º–æ–¥–µ–ª–∏
           response = await self.api_client.make_request(prompt)
           
           # –ü–∞—Ä—Å–∏–Ω–≥ JSON –º–∞—Å—Å–∏–≤–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
           gifts_data = JSONParser.parse_json_array(response)
           
           # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ Pydantic
           validated_gifts = []
           for i, gift_data in enumerate(gifts_data):
               try:
                   validated_gift = GiftModel(**gift_data)
                   validated_gifts.append(validated_gift)
               except Exception as e:
                   self.logger.warning(f"‚ö†Ô∏è –ü–æ–¥–∞—Ä–æ–∫ #{i+1} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {e}")
           
           if not validated_gifts:
               raise ValueError("–ù–∏ –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
           
           self.logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(validated_gifts)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
           
           # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
           print("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:")
           for i, gift in enumerate(validated_gifts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
               print(f"  {i}. {gift.–ø–æ–¥–∞—Ä–æ–∫} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {gift.—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å}/10)")
           if len(validated_gifts) > 5:
               print(f"  ... –∏ –µ—â–µ {len(validated_gifts) - 5} –ø–æ–¥–∞—Ä–∫–æ–≤")
           
           return validated_gifts
           
       except Exception as e:
           self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {str(e)}")
           self.logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤")
           return self._get_fallback_gifts()
   
   def _get_fallback_gifts(self) -> List[GiftModel]:
       """
       –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
       
       Returns:
           –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
       """
       self.logger.info("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤")
       
       fallback_data = [
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–£–º–Ω—ã–π –≤–µ–ª–æ–∫–æ–º–ø—å—é—Ç–µ—Ä",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è –≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–æ–∫",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "6000 - 15000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 9
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–≤—É–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "8000 - 25000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 8
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç –∏–ª–∏ —É–º–Ω—ã–µ —á–∞—Å—ã",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–ª–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 30000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 9
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Ñ–µ–≤–∞—Ä–∫–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ª—é–±–∏—Ç–µ–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "3000 - 7000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–ö–Ω–∏–≥–∞ –ø–æ –Ω–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º Java",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "2000 - 10000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 8
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–∞—Å—Å–∞–∂",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û—Ç–ª–∏—á–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∑–∞–Ω—è—Ç–∏—è–º –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 12000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –∏ –≤–æ –≤—Ä–µ–º—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–æ–∫",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "2000 - 6000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 8
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–æ—Å—Ç—É–ø –∫ —Ñ–∏–ª—å–º–∞–º –∏ —Å–µ—Ä–∏–∞–ª–∞–º –¥–ª—è –ª—é–±–∏—Ç–µ–ª—è –∫–∏–Ω–æ",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "3000 - 7000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 8
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–ù–∞–±–æ—Ä –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤–æ–≥–æ –ø–∏–≤–∞",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–æ–≤–æ–µ —Ö–æ–±–±–∏, —Å–æ—á–µ—Ç–∞—é—â–µ–µ—Å—è —Å –ª—é–±–æ–≤—å—é –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 12000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 6
           },
           {
               "–ø–æ–¥–∞—Ä–æ–∫": "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –º–∞–≥–∞–∑–∏–Ω –≤–µ–ª–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –∏–ª–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "3000 - 15000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 9
           }
       ]
       
       return [GiftModel(**gift) for gift in fallback_data]

print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


"""
–Ø—á–µ–π–∫–∞ 10: –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º—ã
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
"""

class GiftSelectionService:
   """
   –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
   –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∞—Ä–∫–æ–≤
   """
   
   def __init__(self, config: Configuration):
       self.config = config
       self.logger = logging.getLogger("GiftSelectionService")
   
   async def select_gifts(self, person_info: str) -> List[Dict[str, Any]]:
       """
       –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
       
       Args:
           person_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
           
       Returns:
           –°–ø–∏—Å–æ–∫ –∏–∑ 2 –ª—É—á—à–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
       """
       # –ò—Å–ø–æ–ª—å–∑—É–µ–º async context manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTTP —Å–µ—Å—Å–∏–µ–π
       async with OpenRouterClient(self.config) as api_client:
           try:
               self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤")
               
               # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
               self.logger.info("üìù –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤")
               gift_generator = GiftGenerator(api_client)
               gifts_data = await gift_generator.generate_gifts(person_info)
               
               # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
               self.logger.info("ü§ñ –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ 6 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤")
               agents = [
                   SpecializedAgent(agent_type, api_client)
                   for agent_type in AgentType
               ]
               
               print(f"üë• –ê–≥–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∞–Ω–∞–ª–∏–∑—É:")
               for agent in agents:
                   print(f"  - {agent.agent_type.value}")
               
               # –≠—Ç–∞–ø 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–ö–õ–Æ–ß–ï–í–û–ï –£–õ–£–ß–®–ï–ù–ò–ï!)
               self.logger.info("‚ö° –≠—Ç–∞–ø 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏")
               start_time = time.time()
               
               # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
               tasks = [
                   agent.analyze_gifts(person_info, gifts_data)
                   for agent in agents
               ]
               
               # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
               agent_responses = await asyncio.gather(*tasks, return_exceptions=True)
               
               analysis_time = time.time() - start_time
               self.logger.info(f"‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.2f} —Å–µ–∫—É–Ω–¥")
               
               # –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
               valid_responses = []
               for i, response in enumerate(agent_responses):
                   if isinstance(response, Exception):
                       self.logger.error(f"‚ùå –ê–≥–µ–Ω—Ç {agents[i].agent_type.value} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response}")
                       continue
                   valid_responses.append((agents[i].agent_type, response))
               
               self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç {len(valid_responses)}/{len(agents)} –∞–≥–µ–Ω—Ç–æ–≤")
               
               # –≠—Ç–∞–ø 5: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
               self.logger.info("üéØ –≠—Ç–∞–ø 5: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è")
               final_selection = self._select_final_gifts(valid_responses, gifts_data)
               
               self.logger.info("üèÜ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É!")
               return final_selection
               
           except Exception as e:
               self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ: {str(e)}")
               self.logger.error(traceback.format_exc())
               return self._get_fallback_final_selection()
   
   def _select_final_gifts(
       self, 
       agent_responses: List[tuple], 
       gifts_data: List[GiftModel]
   ) -> List[Dict[str, Any]]:
       """
       –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
       
       Args:
           agent_responses: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–∏–ø_–∞–≥–µ–Ω—Ç–∞, –æ—Ç–≤–µ—Ç_–∞–≥–µ–Ω—Ç–∞)
           gifts_data: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤
           
       Returns:
           –¢–æ–ø-2 –ø–æ–¥–∞—Ä–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
       """
       self.logger.info("üîç –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è")
       
       # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–∞—Ä–∫—É
       gift_scores = {}
       
       # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
       for agent_type, response in agent_responses:
           gift_name = response.–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫
           
           # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
           score = self._extract_score_from_response(agent_type, response)
           
           # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
           if gift_name not in gift_scores:
               gift_scores[gift_name] = []
           gift_scores[gift_name].append((agent_type.value, score))
           
           self.logger.info(f"üó≥Ô∏è {agent_type.value} –≤—ã–±—Ä–∞–ª '{gift_name}' —Å –æ—Ü–µ–Ω–∫–æ–π {score}")
       
       # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
       average_scores = {}
       for gift, scores in gift_scores.items():
           total_score = sum(score for _, score in scores)
           avg_score = total_score / len(scores) if scores else 0
           
           average_scores[gift] = {
               "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": avg_score,
               "–≥–æ–ª–æ—Å–∞_–∞–≥–µ–Ω—Ç–æ–≤": [agent for agent, _ in scores],
               "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": len(scores),
               "–¥–µ—Ç–∞–ª–∏_–≥–æ–ª–æ—Å–æ–≤": scores
           }
       
       # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É
       sorted_gifts = sorted(
           average_scores.items(),
           key=lambda x: (x[1]["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤"], x[1]["—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª"]),
           reverse=True
       )
       
       self.logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:")
       for gift, metrics in sorted_gifts:
           self.logger.info(
               f"  {gift}: {metrics['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤']} –≥–æ–ª–æ—Å–æ–≤, "
               f"—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª {metrics['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']:.1f}"
           )
       
       # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø-2
       final_selection = []
       for i, (gift_name, metrics) in enumerate(sorted_gifts[:2]):
           # –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µ
           gift_details = next(
               (gift for gift in gifts_data if gift.–ø–æ–¥–∞—Ä–æ–∫ == gift_name), 
               None
           )
           
           if gift_details:
               final_selection.append({
                   "–º–µ—Å—Ç–æ": i + 1,
                   "–ø–æ–¥–∞—Ä–æ–∫": gift_name,
                   "–æ–ø–∏—Å–∞–Ω–∏–µ": gift_details.–æ–ø–∏—Å–∞–Ω–∏–µ,
                   "—Å—Ç–æ–∏–º–æ—Å—Ç—å": gift_details.—Å—Ç–æ–∏–º–æ—Å—Ç—å,
                   "query": gift_details.query,
                   "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": gift_details.—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å,
                   "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": round(metrics["—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª"], 2),
                   "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": metrics["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤"],
                   "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": metrics["–≥–æ–ª–æ—Å–∞_–∞–≥–µ–Ω—Ç–æ–≤"],
                   "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": metrics["–¥–µ—Ç–∞–ª–∏_–≥–æ–ª–æ—Å–æ–≤"]
               })
       
       # –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ 2 –ø–æ–¥–∞—Ä–∫–æ–≤ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
       if len(final_selection) < 2:
           self._add_backup_gifts(final_selection, gifts_data)
       
       return final_selection
   
   def _extract_score_from_response(self, agent_type: AgentType, response: AgentResponseModel) -> float:
       """
       –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞
       
       Args:
           agent_type: –¢–∏–ø –∞–≥–µ–Ω—Ç–∞
           response: –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
           
       Returns:
           –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (0-100)
       """
       score_mapping = {
           AgentType.PRAKTIK_BOT: response.–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_—Ü–µ–Ω–Ω–æ—Å—Ç–∏ or 0,
           AgentType.FIN_EXPERT: min((response.roi_–∏–Ω–¥–µ–∫—Å or 0) * 20, 100),  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
           AgentType.WOW_FACTOR: response.—Å—Ç–µ–ø–µ–Ω—å_–≤–æ—Å—Ç–æ—Ä–≥–∞_–ø—Ä–æ—Ü–µ–Ω—Ç or 0,
           AgentType.UNIVERSAL_GURU: response.–ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è or 0,
           AgentType.SURPRISE_MASTER: response.—à–∞–Ω—Å_–∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è_–ø—Ä–æ—Ü–µ–Ω—Ç or 0,
           AgentType.PROF_ROST: response.–ø—Ä–æ–≥–Ω–æ–∑_—Ä–æ—Å—Ç–∞_—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ–Ω—Ç or 0
       }
       return float(score_mapping.get(agent_type, 0))
   
   def _add_backup_gifts(self, final_selection: List[Dict], gifts_data: List[GiftModel]) -> None:
       """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω–µ–µ 2 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
       selected_gifts = {item["–ø–æ–¥–∞—Ä–æ–∫"] for item in final_selection}
       
       for gift in gifts_data:
           if gift.–ø–æ–¥–∞—Ä–æ–∫ not in selected_gifts and len(final_selection) < 2:
               final_selection.append({
                   "–º–µ—Å—Ç–æ": len(final_selection) + 1,
                   "–ø–æ–¥–∞—Ä–æ–∫": gift.–ø–æ–¥–∞—Ä–æ–∫,
                   "–æ–ø–∏—Å–∞–Ω–∏–µ": gift.–æ–ø–∏—Å–∞–Ω–∏–µ,
                   "—Å—Ç–æ–∏–º–æ—Å—Ç—å": gift.—Å—Ç–æ–∏–º–æ—Å—Ç—å,
                   "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": gift.—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å,
                   "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
                   "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
                   "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["–∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"],
                   "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
               })
   
   def _get_fallback_final_selection(self) -> List[Dict[str, Any]]:
       """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö"""
       self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤")
       return [
           {
               "–º–µ—Å—Ç–æ": 1,
               "–ø–æ–¥–∞—Ä–æ–∫": "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç –∏–ª–∏ —É–º–Ω—ã–µ —á–∞—Å—ã",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–ª–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 30000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 9,
               "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 85.0,
               "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 1,
               "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_system"],
               "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": [("emergency_system", 85.0)]
           },
           {
               "–º–µ—Å—Ç–æ": 2,
               "–ø–æ–¥–∞—Ä–æ–∫": "–£–º–Ω—ã–π –≤–µ–ª–æ–∫–æ–º–ø—å—é—Ç–µ—Ä",
               "–æ–ø–∏—Å–∞–Ω–∏–µ": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è –≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–æ–∫",
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "6000 - 15000",
               "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 9,
               "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 90.0,
               "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 1,
               "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_system"],
               "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": [("emergency_system", 90.0)]
           }
       ]

print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –≥–æ—Ç–æ–≤")

"""
–Ø—á–µ–π–∫–∞ 11: –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ Jupyter
"""

class ResultFormatter:
   """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Jupyter Notebook"""
   
   @staticmethod
   def format_results(final_selection: List[Dict[str, Any]], gifts_data: List[GiftModel]) -> str:
       """
       –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
       
       Args:
           final_selection: –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
           gifts_data: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
           
       Returns:
           –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
       """
       result = "\n" + "="*60 + "\n"
       result += "üéÅ –°–ò–°–¢–ï–ú–ê –í–´–ë–û–†–ê –ü–û–î–ê–†–ö–û–í - –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê\n"
       result += "="*60 + "\n\n"
       
       # –°–µ–∫—Ü–∏—è 1: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤
       result += "üìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:\n"
       result += "-" * 40 + "\n"
       for i, gift in enumerate(gifts_data, 1):
           result += f"{i:2}. {gift.–ø–æ–¥–∞—Ä–æ–∫}\n"
           result += f"    üí∞ {gift.—Å—Ç–æ–∏–º–æ—Å—Ç—å}‚ÇΩ | ‚≠ê {gift.—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å}/10\n"
       
       result += "\n" + "="*60 + "\n"
       result += "üèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –û–¢ –ò–ò-–ê–ì–ï–ù–¢–û–í\n"
       result += "="*60 + "\n\n"
       
       # –°–µ–∫—Ü–∏—è 2: –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
       for gift in final_selection:
           result += f"ü•á –ú–ï–°–¢–û #{gift['–º–µ—Å—Ç–æ']}: {gift['–ø–æ–¥–∞—Ä–æ–∫']}\n"
           result += "-" * (len(gift['–ø–æ–¥–∞—Ä–æ–∫']) + 15) + "\n"
           result += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {gift['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n"
           result += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {gift['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}‚ÇΩ\n"
           result += f"‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {gift['—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å']}/10\n"
           result += f"üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ò–ò: {gift['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']}/100\n"
           result += f"üó≥Ô∏è  –ì–æ–ª–æ—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {gift['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤']}\n"
           result += f"ü§ñ –í—ã–±—Ä–∞–ª–∏ –∞–≥–µ–Ω—Ç—ã: {', '.join(gift['–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏'])}\n"
           
           # –î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
           if gift.get('–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫'):
               result += f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:\n"
               for agent, score in gift['–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫']:
                   result += f"     ‚Ä¢ {agent}: {score}\n"
           
           result += "\n"
       
       result += "="*60 + "\n"
       result += "‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞! ‚ú®\n"
       result += "="*60 + "\n"
       
       return result
   
   @staticmethod
   def display_progress(step: str, details: str = ""):
       """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
       print(f"üîÑ {step}")
       if details:
           print(f"   {details}")
   
   @staticmethod
   def display_agent_analysis(agent_type: str, chosen_gift: str, score: float):
       """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
       print(f"ü§ñ {agent_type}: –≤—ã–±—Ä–∞–ª '{chosen_gift}' (–æ—Ü–µ–Ω–∫–∞: {score:.1f})")

print("‚úÖ –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ—Ç–æ–≤")


"""
–Ø—á–µ–π–∫–∞ 12: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å event loop –≤ Jupyter Notebook
"""

async def run_neuro_gift_async(person_info: str) -> List[Dict[str, Any]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
    
    Args:
        person_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∏–∑ 2 –ª—É—á—à–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        config = Configuration.from_env()
        logger.info(f"üîß –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –º–æ–¥–µ–ª—å—é: {config.model}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        service = GiftSelectionService(config)
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤...")
        logger.info(f"üë§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {person_info[:100]}...")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
        final_selection = await service.select_gifts(person_info)
        
        logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É!")
        return final_selection
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        logger.error(traceback.format_exc())
        
        # –í–æ–∑–≤—Ä–∞—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        try:
            service = GiftSelectionService(Configuration.from_env())
            return service._get_fallback_final_selection()
        except:
            # –ï—Å–ª–∏ –¥–∞–∂–µ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return [{
                "–º–µ—Å—Ç–æ": 1,
                "–ø–æ–¥–∞—Ä–æ–∫": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–¥–∞—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π",
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 15000",
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7,
                "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
                "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_fallback"],
                "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
            }]

def run_neuro_gift(person_info: str) -> List[Dict[str, Any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è Jupyter Notebook (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º event loop
    
    Args:
        person_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        PersonInfoModel(info=person_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop (–∫–∞–∫ –≤ Jupyter)
        try:
            # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º create_task
            loop = asyncio.get_running_loop()
            logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º await")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º event loop
            import nest_asyncio
            nest_asyncio.apply()  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ event loops
            
            # –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run
            return asyncio.run(run_neuro_gift_async(person_info))
            
        except RuntimeError:
            # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            logger.info("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop")
            return asyncio.run(run_neuro_gift_async(person_info))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–µ: {str(e)}")
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        return [{
            "–º–µ—Å—Ç–æ": 1,
            "–ø–æ–¥–∞—Ä–æ–∫": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫",
            "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–¥–∞—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ",
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 15000",
            "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7,
            "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
            "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_wrapper"],
            "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
        }]

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Jupyter
async def run_neuro_gift_jupyter(person_info: str) -> List[Dict[str, Any]]:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Jupyter Notebook
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Å await –≤ Jupyter
    """
    return await run_neuro_gift_async(person_info)

print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É")
#print("üí° –î–ª—è Jupyter –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: await run_neuro_gift_jupyter('–ø—Ä–æ—Ñ–∏–ª—å')")

"""
–°–¢–ê–†–ê–Ø –Ø–ß–ï–ô–ö–ê !!!! –Ø—á–µ–π–∫–∞ 13: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å event loop –¥–ª—è Jupyter Notebook
"""

async def demo_run(person_info: str = None):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
    
    Args:
        person_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä)
    """
    # –ü—Ä–∏–º–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if person_info is None:
        person_info = """
        –ú—É–∂—á–∏–Ω–∞ 37 –ª–µ—Ç, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–π –≤ –ú–æ—Å–∫–≤–µ.
        –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º, –∫–∏–Ω–æ, –º—É–∑—ã–∫–æ–π.
        –•–æ–¥–∏—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª –∏ –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å.
        –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –Ω–∞ Java.
        """
    
    try:
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –í–´–ë–û–†–ê –ü–û–î–ê–†–ö–û–í")
        print("=" * 50)
        print(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        print(person_info.strip())
        print("\n" + "=" * 50)
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        final_selection = await run_neuro_gift_async(person_info)
        
        # –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - start_time
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if final_selection:
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
            demo_gifts = [
                GiftModel(
                    –ø–æ–¥–∞—Ä–æ–∫=gift["–ø–æ–¥–∞—Ä–æ–∫"],
                    –æ–ø–∏—Å–∞–Ω–∏–µ=gift["–æ–ø–∏—Å–∞–Ω–∏–µ"],
                    —Å—Ç–æ–∏–º–æ—Å—Ç—å=gift["—Å—Ç–æ–∏–º–æ—Å—Ç—å"],
                    —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=gift["—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"]
                )
                for gift in final_selection
            ]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
            formatted_result = ResultFormatter.format_results(final_selection, demo_gifts)
            print(formatted_result)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {len(AgentType)}")
            print(f"üéÅ –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(final_selection)}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        return final_selection
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return []

def quick_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è Jupyter Notebook (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    person_info = """
    –ñ–µ–Ω—â–∏–Ω–∞ 28 –ª–µ—Ç, –∂–∏–≤–µ—Ç –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.
    –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –π–æ–≥–æ–π, —á—Ç–µ–Ω–∏–µ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.
    –†–∞–±–æ—Ç–∞–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º, –ª—é–±–∏—Ç –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
    """
    
    print("üöÄ –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 30)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ event loop
        try:
            loop = asyncio.get_running_loop()
            print("üîÑ Jupyter event loop –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: await quick_demo_async() –≤–º–µ—Å—Ç–æ quick_demo()")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ await quick_demo_async() –≤ Jupyter"
            
        except RuntimeError:
            # Event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run
            result = asyncio.run(run_neuro_gift_async(person_info))
            
            print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            for gift in result:
                print(f"  üéÅ {gift['–º–µ—Å—Ç–æ']}. {gift['–ø–æ–¥–∞—Ä–æ–∫']}")
                print(f"     üí∞ {gift['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}‚ÇΩ")
                print(f"     ‚≠ê –û—Ü–µ–Ω–∫–∞: {gift['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']}/100")
                print()
            
            return result
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

async def quick_demo_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è Jupyter"""
    person_info = """
    –ñ–µ–Ω—â–∏–Ω–∞ 28 –ª–µ—Ç, –∂–∏–≤–µ—Ç –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.
    –£–ª–µ–∫–∞–µ—Ç—Å—è –π–æ–≥–æ–π, —á—Ç–µ–Ω–∏–µ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.
    –†–∞–±–æ—Ç–∞–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º, –ª—é–±–∏—Ç –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
    """
    
    print("üöÄ –ë–´–°–¢–†–ê–Ø –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 40)
    
    try:
        result = await run_neuro_gift_async(person_info)
        
        print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for gift in result:
            print(f"  üéÅ {gift['–º–µ—Å—Ç–æ']}. {gift['–ø–æ–¥–∞—Ä–æ–∫']}")
            print(f"     üí∞ {gift['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}‚ÇΩ")
            print(f"     ‚≠ê –û—Ü–µ–Ω–∫–∞: {gift['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']}/100")
            print()
        
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

# print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã")
# print("\nüìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ó–ê–ü–£–°–ö–£ –í JUPYTER:")
# print("1. –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: await demo_run()")
# print("2. –î–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: await quick_demo_async()")
# print("3. –î–ª—è —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö: await demo_run('–≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ')")


"""
–Ø—á–µ–π–∫–∞ 14: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

def system_check():
   """
   –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
   """
   print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
   print("=" * 40)
   
   checks_passed = 0
   total_checks = 6
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: API —Ç–æ–∫–µ–Ω
   try:
       config = Configuration.from_env()
       print("‚úÖ 1. API —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
       print(f"   –ú–æ–¥–µ–ª—å: {config.model}")
       checks_passed += 1
   except Exception as e:
       print(f"‚ùå 1. –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞: {e}")
       print("   üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å OPEN_API_TOKEN=your_token_here")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ò–º–ø–æ—Ä—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫
   try:
       import aiohttp
       import pydantic
       print("‚úÖ 2. –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
       checks_passed += 1
   except ImportError as e:
       print(f"‚ùå 2. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {e}")
       print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiohttp pydantic python-dotenv")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
   try:
       test_gift = GiftModel(
           –ø–æ–¥–∞—Ä–æ–∫="–¢–µ—Å—Ç",
           –æ–ø–∏—Å–∞–Ω–∏–µ="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
           —Å—Ç–æ–∏–º–æ—Å—Ç—å="1000 - 2000",
           —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=5
       )
       print("‚úÖ 3. –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
       checks_passed += 1
   except Exception as e:
       print(f"‚ùå 3. –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: JSON –ø–∞—Ä—Å–µ—Ä
   try:
       test_json = '{"—Ç–µ—Å—Ç": "–∑–Ω–∞—á–µ–Ω–∏–µ", "—á–∏—Å–ª–æ": 42}'
       parsed = JSONParser.parse_json_response(test_json)
       print("‚úÖ 4. JSON –ø–∞—Ä—Å–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
       checks_passed += 1
   except Exception as e:
       print(f"‚ùå 4. –û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–µ—Ä–∞: {e}")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –¢–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤
   try:
       agents_count = len(AgentType)
       print(f"‚úÖ 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {agents_count} —Ç–∏–ø–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤")
       checks_passed += 1
   except Exception as e:
       print(f"‚ùå 5. –û—à–∏–±–∫–∞ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ü—Ä–æ–º–ø—Ç—ã
   try:
       test_prompt = PromptTemplate.get_agent_prompt(AgentType.PRAKTIK_BOT, "—Ç–µ—Å—Ç")
       if "JSON" in test_prompt:
           print("‚úÖ 6. –ü—Ä–æ–º–ø—Ç—ã —Å JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –≥–æ—Ç–æ–≤—ã")
           checks_passed += 1
       else:
           print("‚ùå 6. –ü—Ä–æ–º–ø—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
   except Exception as e:
       print(f"‚ùå 6. –û—à–∏–±–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
   
   # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   print("\n" + "=" * 40)
   if checks_passed == total_checks:
       print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
       print("\nüöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å:")
       print("   ‚Ä¢ await demo_run() - –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
       print("   ‚Ä¢ quick_demo() - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞")
       return True
   else:
       print(f"‚ö†Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ {checks_passed}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫")
       print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏—Å—Ç–µ–º—ã")
       return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —è—á–µ–π–∫–∏
try:
   CONFIG = Configuration.from_env()
   print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
   print("üìñ –ó–∞–ø—É—Å—Ç–∏—Ç–µ system_check() –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
except Exception as e:
   print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞")
   print(f"   –û—à–∏–±–∫–∞: {e}")
   print("üìñ –ó–∞–ø—É—Å—Ç–∏—Ç–µ system_check() –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

    
    
   
"""
–Ø—á–µ–π–∫–∞ 15: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
–ì–æ—Ç–æ–≤—ã–π –∫ –∑–∞–ø—É—Å–∫—É –∫–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
"""
def init():
    print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã...")
    system_ready = system_check()

    if system_ready:
        print("\n" + "üéØ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò" + "\n" + "=" * 30)
    
    # –ü—Ä–∏–º–µ—Ä 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    try:
        # –î–ª—è Jupyter Notebook –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        result = demo_run()
        
        if result:
            print("\n‚ú® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            print("\nüéÅ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
            for gift in result:
                print(f"  {gift['–º–µ—Å—Ç–æ']}. {gift['–ø–æ–¥–∞—Ä–æ–∫']} - {gift['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']}/100 –±–∞–ª–ª–æ–≤")
                
        else:
            print("\n‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
        
        # Fallback: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        fallback_result = quick_demo()
        if fallback_result:
            print("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    else:
        print("\nüõë –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ö–æ—Ç—è –±—ã –ø–æ–∫–∞–∑–∞—Ç—å fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        try:
            emergency_result = [{
                "–º–µ—Å—Ç–æ": 1,
                "–ø–æ–¥–∞—Ä–æ–∫": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (–∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ",
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 15000",
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7,
                "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
                "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_mode"],
                "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
            }]
            print("üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - —Å–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        except:
            print("üí• –ü–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ —Å–∏—Å—Ç–µ–º—ã")


### –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
### –î–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è run_neuro_gift


if __name__ == "__main__":
    init()
    person_info = """
–ú—É–∂—á–∏–Ω–∞ 37 –ª–µ—Ç, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–π –≤ –ú–æ—Å–∫–≤–µ.
–£–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º, –∫–∏–Ω–æ, –º—É–∑—ã–∫–æ–π.
–•–æ–¥–∏—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª –∏ –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å.
–†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –Ω–∞ Java.
"""
    result = run_neuro_gift(person_info)
    print(result)
    

# –ê–≥–µ–Ω—Ç —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é
# def run_neuro_gift(user_text):
#     print("Run neuro gift")
#     asyncio.run(run_neuro_gift_async(user_text))