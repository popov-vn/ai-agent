"""
–Ø—á–µ–π–∫–∞ 1: –ò–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–û–ë–ù–û–í–õ–ï–ù–û –° LANGGRAPH)
–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤–∫–ª—é—á–∞—è LangGraph
"""

import asyncio
import json
import logging
import os
import time
import traceback
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Dict, List, Optional, Any, Union, Annotated
from enum import Enum
import operator

import aiohttp
from pydantic import BaseModel, Field, validator
from dotenv import load_dotenv

# LangGraph –∏–º–ø–æ—Ä—Ç—ã
from langgraph.graph import StateGraph, END, START
from langgraph.graph.message import add_messages
from typing_extensions import TypedDict


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Jupyter
    ]
)
logger = logging.getLogger(__name__)
logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å LangGraph –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Å LangGraph –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

"""
–Ø—á–µ–π–∫–∞ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
–°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
"""

class AgentType(Enum):
    """–¢–∏–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    PRAKTIK_BOT = "praktik_bot"           # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–ª—å–∑—É
    FIN_EXPERT = "fin_expert"             # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
    WOW_FACTOR = "wow_factor"             # –ò—â–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    UNIVERSAL_GURU = "universal_guru"     # –ò—â–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
    SURPRISE_MASTER = "surprise_master"   # –ò—â–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
    PROF_ROST = "prof_rost"              # –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏

print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(AgentType)} —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤:")
for agent_type in AgentType:
    print(f"  - {agent_type.value}")


"""
–Ø—á–µ–π–∫–∞ 3: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LangGraph —Å–æ—Å—Ç–æ—è–Ω–∏—è (–û–ë–ù–û–í–õ–ï–ù–û)
–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è LangGraph workflow
"""

class GiftModel(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ–ª–µ–π"""
    –ø–æ–¥–∞—Ä–æ–∫: str = Field(..., min_length=0, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
    –æ–ø–∏—Å–∞–Ω–∏–µ: str = Field(..., min_length=0, description="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
    —Å—Ç–æ–∏–º–æ—Å—Ç—å: str = Field(..., min_length=0, description="–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: int = Field(..., ge=1, le=10, description="–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10")
    query: str = Field(..., min_length=0, description="query")

    @validator('—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å')
    def validate_relevance(cls, v):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å - —ç—Ç–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10"""
        if not isinstance(v, int):
            try:
                return int(float(v))
            except (ValueError, TypeError):
                raise ValueError('–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10')
        return v

class AgentResponseModel(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –ò–ò-–∞–≥–µ–Ω—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    –≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫: str = Field(..., min_length=0)
    –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: str = Field(..., min_length=0)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
    –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_—Ü–µ–Ω–Ω–æ—Å—Ç–∏: Optional[int] = Field(None, ge=0, le=100)
    roi_–∏–Ω–¥–µ–∫—Å: Optional[float] = Field(None, ge=0)
    —Å—Ç–µ–ø–µ–Ω—å_–≤–æ—Å—Ç–æ—Ä–≥–∞_–ø—Ä–æ—Ü–µ–Ω—Ç: Optional[int] = Field(None, ge=0, le=100)
    –ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: Optional[int] = Field(None, ge=0, le=100)
    —à–∞–Ω—Å_–∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è_–ø—Ä–æ—Ü–µ–Ω—Ç: Optional[int] = Field(None, ge=0, le=100)
    –ø—Ä–æ–≥–Ω–æ–∑_—Ä–æ—Å—Ç–∞_—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ–Ω—Ç: Optional[int] = Field(None, ge=0, le=100)

class PersonInfoModel(BaseModel):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π"""
    info: str = Field(..., min_length=0)
    
    @validator('info')
    def validate_person_info(cls, v):
        """–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        dangerous_patterns = ['<script', 'javascript:', 'eval(', 'exec(', 'import(']
        v_lower = v.lower()
        for pattern in dangerous_patterns:
            if pattern in v_lower:
                raise ValueError(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {pattern}')
        return v.strip()

# LangGraph State - —Å–æ—Å—Ç–æ—è–Ω–∏–µ workflow
class GraphState(TypedDict):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ LangGraph –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É–∑–ª–∞–º–∏"""
    person_info: str                                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
    gifts_data: List[Dict[str, Any]]                   # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
    agent_responses: Dict[str, Dict[str, Any]]         # –û—Ç–≤–µ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
    final_selection: List[Dict[str, Any]]              # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
    current_step: str                                  # –¢–µ–∫—É—â–∏–π —à–∞–≥ workflow
    error_messages: List[str]                          # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    execution_time: float                              # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    
print("‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LangGraph —Å–æ–∑–¥–∞–Ω—ã")

"""
–Ø—á–µ–π–∫–∞ 4: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API, –ª–∏–º–∏—Ç—ã, —Ç–∞–π–º–∞—É—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
"""

@dataclass
class Configuration:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    api_token: str                              # API —Ç–æ–∫–µ–Ω –¥–ª—è OpenRouter
    base_url: str = "https://openrouter.ai/api/v1"  # –ë–∞–∑–æ–≤—ã–π URL API
    model: str = "google/gemini-2.5-flash-preview:thinking"  # –ú–æ–¥–µ–ª—å –ò–ò
    max_retries: int = 3                        # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    retry_delay: float = 2.0                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)
    request_timeout: int = 90                   # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ–∫)
    max_concurrent_requests: int = 6            # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    @classmethod
    def from_env(cls) -> 'Configuration':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        token = os.getenv("OPEN_API_TOKEN")
        if not token:
            raise ValueError("‚ùå OPEN_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        config = cls(
            api_token=token,
            base_url=os.getenv("OPENROUTER_BASE_URL", cls.base_url),
            model=os.getenv("OPENROUTER_MODEL", cls.model),
            max_retries=int(os.getenv("MAX_RETRIES", cls.max_retries)),
            retry_delay=float(os.getenv("RETRY_DELAY", cls.retry_delay)),
            request_timeout=int(os.getenv("REQUEST_TIMEOUT", cls.request_timeout)),
            max_concurrent_requests=int(os.getenv("MAX_CONCURRENT_REQUESTS", cls.max_concurrent_requests))
        )
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        print(f"  - –ú–æ–¥–µ–ª—å: {config.model}")
        print(f"  - –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {config.max_concurrent_requests}")
        print(f"  - –¢–∞–π–º–∞—É—Ç: {config.request_timeout}—Å")
        
        return config

print("‚úÖ –ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤")

"""
–Ø—á–µ–π–∫–∞ 5: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON –æ—Ç–≤–µ—Ç–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π ast.literal_eval –Ω–∞ json.loads —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

class JSONParser:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò –º–æ–¥–µ–ª–µ–π
    –£—Å—Ç—Ä–∞–Ω—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    """
    
    @staticmethod
    def parse_json_response(response: str) -> Dict[str, Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
        
        Args:
            response: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –º–æ–¥–µ–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            
        Raises:
            ValueError: –ï—Å–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_response = response.strip()
            
            # –®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ markdown —Ä–∞–∑–º–µ—Ç–∫–∏
            if "```json" in clean_response:
                parts = clean_response.split("```json")
                if len(parts) > 1:
                    clean_response = parts[1].split("```")[0].strip()
            elif "```" in clean_response:
                parts = clean_response.split("```")
                if len(parts) > 1:
                    clean_response = parts[1].split("```")[0].strip()
            
            # –®–∞–≥ 3: –ü–æ–∏—Å–∫ JSON –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ (—É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
            json_str = clean_response
            
            # –ò—â–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
            start_idx = clean_response.find('{')
            if start_idx != -1:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                brace_count = 0
                end_idx = -1
                
                for i in range(start_idx, len(clean_response)):
                    if clean_response[i] == '{':
                        brace_count += 1
                    elif clean_response[i] == '}':
                        brace_count -= 1
                        if brace_count == 0:
                            end_idx = i
                            break
                
                if end_idx != -1:
                    json_str = clean_response[start_idx:end_idx + 1]
            
            # –®–∞–≥ 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ JSON —Å—Ç—Ä–æ–∫–∏
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫
            json_str = json_str.replace('\n', ' ').replace('\r', ' ')
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
            import re
            json_str = re.sub(r'\s+', ' ', json_str)
            
            # –®–∞–≥ 5: –ë–ï–ó–û–ü–ê–°–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ json.loads
            parsed_data = json.loads(json_str)
            
            # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not isinstance(parsed_data, dict):
                raise ValueError("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º (—Å–ª–æ–≤–∞—Ä–µ–º)")
            
            logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, –ø–æ–ª–µ–π: {len(parsed_data)}")
            return parsed_data
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
            logger.error(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
            logger.error(f"üîç –û—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {json_str[:500] if 'json_str' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}...")
            print(traceback.format_exc())
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ: {str(e)}")
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
            logger.error(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
            print(traceback.format_exc())
            raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
    
    @staticmethod
    def parse_json_array(response: str) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ JSON –º–∞—Å—Å–∏–≤–∞ (–¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤) - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        Args:
            response: –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π JSON –º–∞—Å—Å–∏–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        """
        try:
            clean_response = response.strip()
            
            # –£–¥–∞–ª–µ–Ω–∏–µ markdown —Ä–∞–∑–º–µ—Ç–∫–∏
            if "```json" in clean_response:
                clean_response = clean_response.split("```json")[1].split("```")[0].strip()
            elif "```" in clean_response:
                clean_response = clean_response.split("```")[1].split("```")[0].strip()
            
            # –ü–æ–∏—Å–∫ JSON –º–∞—Å—Å–∏–≤–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            start_idx = clean_response.find('[')
            if start_idx != -1:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                bracket_count = 0
                end_idx = -1
                
                for i in range(start_idx, len(clean_response)):
                    if clean_response[i] == '[':
                        bracket_count += 1
                    elif clean_response[i] == ']':
                        bracket_count -= 1
                        if bracket_count == 0:
                            end_idx = i
                            break
                
                if end_idx != -1:
                    json_str = clean_response[start_idx:end_idx + 1]
                else:
                    json_str = clean_response
            else:
                json_str = clean_response
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
            json_str = json_str.replace('\n', ' ').replace('\r', ' ')
            import re
            json_str = re.sub(r'\s+', ' ', json_str)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Å—Å–∏–≤–∞
            parsed_data = json.loads(json_str)
            
            if not isinstance(parsed_data, list):
                raise ValueError("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON –º–∞—Å—Å–∏–≤–æ–º")
            
            logger.info(f"‚úÖ JSON –º–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(parsed_data)}")
            return parsed_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –º–∞—Å—Å–∏–≤–∞: {str(e)}")
            print(traceback.format_exc())
            logger.error(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}...")
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –º–∞—Å—Å–∏–≤: {str(e)}")

print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π JSON –ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤")


"""
–Ø—á–µ–π–∫–∞ 6: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å KeyError –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫
"""

class PromptTemplate:
    """–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
    GIFT_GENERATION_PROMPT = """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–¥–∞—Ä–∫–æ–≤. –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ –ø—Ä–µ–¥–ª–æ–∂–∏ 10 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ markdown —Ä–∞–∑–º–µ—Ç–∫–∏.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞:
{{
  "–ø–æ–¥–∞—Ä–æ–∫": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞",
  "–æ–ø–∏—Å–∞–Ω–∏–µ": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞", 
  "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–º–∏–Ω–∏–º—É–º - –º–∞–∫—Å–∏–º—É–º'",
  "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_10,
  "query" : "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–µ"
}}

‚ùó –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON –º–∞—Å—Å–∏–≤–∞
‚ùó –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ä–∞–∑–º–µ—Ç–∫—É
‚ùó –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤–æ–º –∏–∑ 10 –ø–æ–¥–∞—Ä–∫–æ–≤
"""

    @staticmethod
    def get_agent_prompt(agent_type: AgentType, person_info: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞ (–ë–ï–ó —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ JSON –ø—Ä–∏–º–µ—Ä–∞—Ö)
        if agent_type == AgentType.PRAKTIK_BOT:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –ü—Ä–∞–∫—Ç–∏–∫–ë–æ—Ç - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤:
–ù–ê–ß–ê–õ–û_JSON_–û–¢–í–ï–¢–ê
END_JSON_–û–¢–í–ï–¢–ê

–ì–¥–µ –ù–ê–ß–ê–õ–û_JSON_–û–¢–í–ï–¢–ê –∏ END_JSON_–û–¢–í–ï–¢–ê –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª—å–∑—ã  
- "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_—Ü–µ–Ω–Ω–æ—Å—Ç–∏": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
"""

        elif agent_type == AgentType.FIN_EXPERT:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –§–∏–Ω–≠–∫—Å–ø–µ—Ä—Ç - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫ —Å –ª—É—á—à–∏–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏
- "roi_–∏–Ω–¥–µ–∫—Å": —á–∏—Å–ª–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
"""

        elif agent_type == AgentType.WOW_FACTOR:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –í–∞—É–§–∞–∫—Ç–æ—Ä - –∏—â–µ—à—å –ø–æ–¥–∞—Ä–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ—Ç–∫–ª–∏–∫–æ–º.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ—Å—Ç–æ—Ä–≥.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
- "—Å—Ç–µ–ø–µ–Ω—å_–≤–æ—Å—Ç–æ—Ä–≥–∞_–ø—Ä–æ—Ü–µ–Ω—Ç": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
"""

        elif agent_type == AgentType.UNIVERSAL_GURU:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –£–Ω–∏–≤–µ—Ä—Å–∞–ª–ì—É—Ä—É - –∏—â–µ—à—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏—Ç—É–∞—Ü–∏–π.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
- "–ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
"""

        elif agent_type == AgentType.SURPRISE_MASTER:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –°—é—Ä–ø—Ä–∏–∑–ú–∞—Å—Ç–µ—Ä - –∏—â–µ—à—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù —Å–∞–º—ã–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –ø–æ–¥–∞—Ä–æ–∫.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º–æ—Å—Ç–∏
- "—à–∞–Ω—Å_–∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è_–ø—Ä–æ—Ü–µ–Ω—Ç": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
"""

        elif agent_type == AgentType.PROF_ROST:
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

üî• –ê–ë–°–û–õ–Æ–¢–ù–û –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–¢—ã –ü—Ä–æ—Ñ–†–æ—Å—Ç - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –ø–æ–¥–∞—Ä–∫–∞—Ö –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.
–í—ã–±–µ—Ä–∏ –û–î–ò–ù –ø–æ–¥–∞—Ä–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π –¥–ª—è –∫–∞—Ä—å–µ—Ä—ã.

–û—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
- "–ø—Ä–æ–≥–Ω–æ–∑_—Ä–æ—Å—Ç–∞_—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ–Ω—Ç": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
"""
        
        else:
            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
            return f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ï–õ–û–í–ï–ö–ï:
{person_info}

–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:
{{gifts}}

–í—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫ –∏ –æ—Ç–≤–µ—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏:
- "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
- "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
- "–æ—Ü–µ–Ω–∫–∞": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
"""

print("‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≥–æ—Ç–æ–≤—ã")

"""
–Ø—á–µ–π–∫–∞ 7: HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å connection pooling –∏ retry –ª–æ–≥–∏–∫–æ–π
"""

class APIClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫ –∏ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
    
    def __init__(self, config: Configuration):
        self.config = config
        self.session: Optional[aiohttp.ClientSession] = None
        # –°–µ–º–∞—Ñ–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._semaphore = asyncio.Semaphore(config.max_concurrent_requests)
        self.logger = logging.getLogger("APIClient")
    
    async def __aenter__(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ async context manager"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ connection pool –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connector = aiohttp.TCPConnector(
            ssl=True,           # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SSL
            limit=100,          # –û–±—â–∏–π –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            limit_per_host=10   # –õ–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        timeout = aiohttp.ClientTimeout(total=self.config.request_timeout)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={
                "Authorization": f"Bearer {self.config.api_token}",
                "HTTP-Referer": "https://github.com",
                "X-Title": "Gift Recommendation Agent",
                "Content-Type": "application/json"
            }
        )
        self.logger.info("üîó HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ context manager"""
        if self.session:
            await self.session.close()
            self.logger.info("üîå HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    
    async def make_request(self, prompt: str) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π –∏ exponential backoff
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ò–ò
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç –ò–ò –º–æ–¥–µ–ª–∏
            
        Raises:
            Exception: –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—É–¥–∞—á–Ω—ã
        """
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async with self._semaphore:
            for attempt in range(self.config.max_retries):
                try:
                    self.logger.info(f"üîÑ API –∑–∞–ø—Ä–æ—Å: {self.config.base_url}\n{prompt}")
                    self.logger.info(f"üîÑ API –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.max_retries}")
                    
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload –¥–ª—è OpenRouter API
                    payload = {
                        "model": self.config.model,
                        "messages": [{"role": "user", "content": prompt}]
                    }
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP POST –∑–∞–ø—Ä–æ—Å–∞
                    async with self.session.post(
                        f"{self.config.base_url}/chat/completions",
                        json=payload
                    ) as response:
                        
                        if response.status == 200:
                            data = await response.json()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                            if (data.get("choices") and 
                                len(data["choices"]) > 0 and 
                                data["choices"][0].get("message", {}).get("content")):
                                
                                content = data["choices"][0]["message"]["content"]
                                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {content}")
                                return content
                        
                        self.logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        
                except asyncio.TimeoutError:
                    self.logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
                    print(traceback.format_exc())
                
                # Exponential backoff: –∑–∞–¥–µ—Ä–∂–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if attempt < self.config.max_retries - 1:
                    delay = self.config.retry_delay * (2 ** attempt)
                    self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                    await asyncio.sleep(delay)
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            error_msg = f"API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {self.config.max_retries} –ø–æ–ø—ã—Ç–æ–∫"
            self.logger.error(f"üí• {error_msg}")
            raise Exception(error_msg)

print("‚úÖ API –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

"""
–Ø—á–µ–π–∫–∞ 8: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ LangGraph –∞–≥–µ–Ω—Ç—ã
–£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Pydantic –∏ None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
"""

class LangGraphAgent:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è LangGraph –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, agent_type: AgentType, api_client: APIClient):
        self.agent_type = agent_type
        self.api_client = api_client
        self.logger = logging.getLogger(f"LangGraphAgent.{agent_type.value}")
    
    def format_gifts_for_prompt(self, gifts_data: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        formatted_text = ""
        for i, gift in enumerate(gifts_data, 1):
            formatted_text += (
                f"{i}. {gift['–ø–æ–¥–∞—Ä–æ–∫']} - {gift['–æ–ø–∏—Å–∞–Ω–∏–µ']} - "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {gift['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}‚ÇΩ - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {gift['—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å']}/10\n"
            )
        return formatted_text
    
    async def analyze_gifts_node(self, state: GraphState) -> GraphState:
        """–£–∑–µ–ª LangGraph –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∞–≥–µ–Ω—Ç–æ–º"""
        try:
            self.logger.info(f"üîç LangGraph: –ê–Ω–∞–ª–∏–∑ –∞–≥–µ–Ω—Ç–æ–º {self.agent_type.value}")
            
            person_info = state["person_info"]
            gifts_data = state["gifts_data"]
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
            formatted_gifts = self.format_gifts_for_prompt(gifts_data)
            base_prompt = PromptTemplate.get_agent_prompt(self.agent_type, person_info)
            prompt = base_prompt.replace("{gifts}", formatted_gifts)
            
            # –ó–∞–ø—Ä–æ—Å –∫ API
            response = await self.api_client.make_request(prompt)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
            cleaned_response = response.strip()
            if not cleaned_response.startswith('{'):
                start_idx = cleaned_response.find('{')
                end_idx = cleaned_response.rfind('}')
                if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
                    cleaned_response = cleaned_response[start_idx:end_idx + 1]
            
            parsed_response = JSONParser.parse_json_response(cleaned_response)
            validated_response = AgentResponseModel(**parsed_response)
            
            self.logger.info(f"‚úÖ LangGraph: {self.agent_type.value} –≤—ã–±—Ä–∞–ª {validated_response.–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º model_dump)
            agent_responses = state.get("agent_responses", {})
            agent_responses[self.agent_type.value] = validated_response.model_dump()  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            
            return {
                **state,
                "agent_responses": agent_responses,
                "current_step": f"agent_{self.agent_type.value}_completed"
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå LangGraph: –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.agent_type.value}: {str(e)}")
            
            # Fallback –æ—Ç–≤–µ—Ç
            fallback_response = self._get_fallback_response(state["gifts_data"])
            
            agent_responses = state.get("agent_responses", {})
            agent_responses[self.agent_type.value] = fallback_response.model_dump()  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            
            error_messages = state.get("error_messages", [])
            error_messages.append(f"–û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.agent_type.value}: {str(e)}")
            
            return {
                **state,
                "agent_responses": agent_responses,
                "error_messages": error_messages,
                "current_step": f"agent_{self.agent_type.value}_fallback"
            }
    
    def _get_fallback_response(self, gifts_data: List[Dict[str, Any]]) -> AgentResponseModel:
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback –æ—Ç–≤–µ—Ç–∞"""
        if not gifts_data:
            raise ValueError("–ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è fallback –æ—Ç–≤–µ—Ç–∞")
        
        fallback_gift = gifts_data[0]
        
        fallback_responses = {
            AgentType.PRAKTIK_BOT: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift["–ø–æ–¥–∞—Ä–æ–∫"],
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–í—ã—Å–æ–∫–∞—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_—Ü–µ–Ω–Ω–æ—Å—Ç–∏": 75
            },
            AgentType.FIN_EXPERT: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift["–ø–æ–¥–∞—Ä–æ–∫"],
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "roi_–∏–Ω–¥–µ–∫—Å": 2.5
            },
            AgentType.WOW_FACTOR: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift["–ø–æ–¥–∞—Ä–æ–∫"],
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–í—ã—Å–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "—Å—Ç–µ–ø–µ–Ω—å_–≤–æ—Å—Ç–æ—Ä–≥–∞_–ø—Ä–æ—Ü–µ–Ω—Ç": 80
            },
            AgentType.UNIVERSAL_GURU: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift["–ø–æ–¥–∞—Ä–æ–∫"],
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "–ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": 70
            },
            AgentType.SURPRISE_MASTER: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift["–ø–æ–¥–∞—Ä–æ–∫"],
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "—à–∞–Ω—Å_–∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è_–ø—Ä–æ—Ü–µ–Ω—Ç": 75
            },
            AgentType.PROF_ROST: {
                "–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫": fallback_gift["–ø–æ–¥–∞—Ä–æ–∫"],
                "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä)",
                "–ø—Ä–æ–≥–Ω–æ–∑_—Ä–æ—Å—Ç–∞_—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ–Ω—Ç": 65
            }
        }
        
        return AgentResponseModel(**fallback_responses[self.agent_type])

print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ LangGraph –∞–≥–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")

"""
–Ø—á–µ–π–∫–∞ 9: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π LangGraph –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
–£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ Pydantic
"""

class LangGraphGiftGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è LangGraph workflow"""
    
    def __init__(self, api_client: APIClient):
        self.api_client = api_client
        self.logger = logging.getLogger("LangGraphGiftGenerator")
    
    async def generate_gifts_node(self, state: GraphState) -> GraphState:
        """–£–∑–µ–ª LangGraph –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            self.logger.info("üéÅ LangGraph: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤")
            
            person_info = state["person_info"]
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            validated_person_info = PersonInfoModel(info=person_info)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
            prompt = PromptTemplate.GIFT_GENERATION_PROMPT.format(
                person_info=validated_person_info.info
            )
            
            # –ó–∞–ø—Ä–æ—Å –∫ API
            response = await self.api_client.make_request(prompt)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON –º–∞—Å—Å–∏–≤–∞
            gifts_data = JSONParser.parse_json_array(response)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º model_dump –≤–º–µ—Å—Ç–æ dict)
            validated_gifts = []
            for gift_data in gifts_data:
                try:
                    validated_gift = GiftModel(**gift_data)
                    validated_gifts.append(validated_gift.model_dump())  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {e}")
            
            if not validated_gifts:
                self.logger.warning("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤")
                validated_gifts = self._get_fallback_gifts()
            
            self.logger.info(f"‚úÖ LangGraph: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(validated_gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ LangGraph
            return {
                **state,
                "gifts_data": validated_gifts,
                "current_step": "gifts_generated"
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå LangGraph: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {str(e)}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            fallback_gifts = self._get_fallback_gifts()
            
            return {
                **state,
                "gifts_data": fallback_gifts,
                "current_step": "gifts_generated_fallback",
                "error_messages": state.get("error_messages", []) + [f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"]
            }
    
    def _get_fallback_gifts(self) -> List[Dict[str, Any]]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        fallback_data = [
            {
                "–ø–æ–¥–∞—Ä–æ–∫": "–£–º–Ω—ã–π –≤–µ–ª–æ–∫–æ–º–ø—å—é—Ç–µ—Ä",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è –≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–æ–∫",
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "6000 - 15000",
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 9
            },
            {
                "–ø–æ–¥–∞—Ä–æ–∫": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–≤—É–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤",
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "8000 - 25000",
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 8
            },
            {
                "–ø–æ–¥–∞—Ä–æ–∫": "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç –∏–ª–∏ —É–º–Ω—ã–µ —á–∞—Å—ã",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–ª–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö",
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 30000",
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 9
            }
        ]
        
        return fallback_data

print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π LangGraph –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –≥–æ—Ç–æ–≤")

"""
–Ø—á–µ–π–∫–∞ 10: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π LangGraph —Å–µ—Ä–≤–∏—Å (–£–°–¢–†–ê–ù–ï–ù–´ –û–®–ò–ë–ö–ò)
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
"""

class LangGraphGiftSelectionService:
    """–°–µ—Ä–≤–∏—Å –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph"""
    
    def __init__(self, config: Configuration):
        self.config = config
        self.logger = logging.getLogger("LangGraphGiftSelectionService")
    
    async def final_selection_node(self, state: GraphState) -> GraphState:
        """–£–∑–µ–ª LangGraph –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            self.logger.info("üéØ LangGraph: –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤")
            
            agent_responses = state.get("agent_responses", {})
            gifts_data = state["gifts_data"]
            
            # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
            gift_scores = {}
            
            for agent_name, response in agent_responses.items():
                gift_name = response.get("–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–ø–æ–¥–∞—Ä–æ–∫")
                if not gift_name:
                    continue
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π)
                score = self._extract_score_from_response(agent_name, response)
                
                if gift_name not in gift_scores:
                    gift_scores[gift_name] = []
                gift_scores[gift_name].append((agent_name, score))
                
                self.logger.info(f"üó≥Ô∏è LangGraph: {agent_name} –≤—ã–±—Ä–∞–ª '{gift_name}' —Å –æ—Ü–µ–Ω–∫–æ–π {score}")
            
            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫
            average_scores = {}
            for gift, scores in gift_scores.items():
                total_score = sum(score for _, score in scores)
                avg_score = total_score / len(scores) if scores else 0
                
                average_scores[gift] = {
                    "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": avg_score,
                    "–≥–æ–ª–æ—Å–∞_–∞–≥–µ–Ω—Ç–æ–≤": [agent for agent, _ in scores],
                    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": len(scores),
                    "–¥–µ—Ç–∞–ª–∏_–≥–æ–ª–æ—Å–æ–≤": scores
                }
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            sorted_gifts = sorted(
                average_scores.items(),
                key=lambda x: (x[1]["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤"], x[1]["—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª"]),
                reverse=True
            )
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            final_selection = []
            for i, (gift_name, metrics) in enumerate(sorted_gifts[:2]):
                gift_details = next(
                    (gift for gift in gifts_data if gift["–ø–æ–¥–∞—Ä–æ–∫"] == gift_name),
                    None
                )
                
                if gift_details:
                    final_selection.append({
                        "–º–µ—Å—Ç–æ": i + 1,
                        "–ø–æ–¥–∞—Ä–æ–∫": gift_name,
                        "–æ–ø–∏—Å–∞–Ω–∏–µ": gift_details["–æ–ø–∏—Å–∞–Ω–∏–µ"],
                        "—Å—Ç–æ–∏–º–æ—Å—Ç—å": gift_details["—Å—Ç–æ–∏–º–æ—Å—Ç—å"],
                        "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": gift_details["—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"],
                        "query": gift_details["query"],
                        "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": round(metrics["—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª"], 2),
                        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": metrics["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤"],
                        "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": metrics["–≥–æ–ª–æ—Å–∞_–∞–≥–µ–Ω—Ç–æ–≤"],
                        "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": metrics["–¥–µ—Ç–∞–ª–∏_–≥–æ–ª–æ—Å–æ–≤"]
                    })
            
            # –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ 2 –ø–æ–¥–∞—Ä–∫–æ–≤
            if len(final_selection) < 2:
                self._add_backup_gifts(final_selection, gifts_data)
            
            self.logger.info(f"üèÜ LangGraph: –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–∞—Ä–∫–æ–≤: {len(final_selection)}")
            
            return {
                **state,
                "final_selection": final_selection,
                "current_step": "final_selection_completed"
            }
            
        except Exception as e:
            self.logger.error(f"üí• LangGraph: –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {str(e)}")
            
            # Fallback —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
            fallback_selection = self._get_fallback_final_selection(gifts_data)
            
            return {
                **state,
                "final_selection": fallback_selection,
                "current_step": "final_selection_fallback",
                "error_messages": state.get("error_messages", []) + [f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {str(e)}"]
            }
    
    def _extract_score_from_response(self, agent_name: str, response: Dict[str, Any]) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ None)"""
        try:
            score_mapping = {
                "praktik_bot": response.get("–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_—Ü–µ–Ω–Ω–æ—Å—Ç–∏"),
                "fin_expert": response.get("roi_–∏–Ω–¥–µ–∫—Å"),
                "wow_factor": response.get("—Å—Ç–µ–ø–µ–Ω—å_–≤–æ—Å—Ç–æ—Ä–≥–∞_–ø—Ä–æ—Ü–µ–Ω—Ç"),
                "universal_guru": response.get("–ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
                "surprise_master": response.get("—à–∞–Ω—Å_–∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è_–ø—Ä–æ—Ü–µ–Ω—Ç"),
                "prof_rost": response.get("–ø—Ä–æ–≥–Ω–æ–∑_—Ä–æ—Å—Ç–∞_—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ–Ω—Ç")
            }
            
            raw_score = score_mapping.get(agent_name)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π
            if raw_score is None:
                self.logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ü–µ–Ω–∫–∞ –¥–ª—è {agent_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50")
                return 50.0
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è fin_expert
            if agent_name == "fin_expert":
                return min(float(raw_score) * 20, 100.0)
            
            return float(raw_score)
            
        except (TypeError, ValueError) as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –¥–ª—è {agent_name}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50")
            return 50.0
    
    def _add_backup_gifts(self, final_selection: List[Dict], gifts_data: List[Dict]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤"""
        selected_gifts = {item["–ø–æ–¥–∞—Ä–æ–∫"] for item in final_selection}
        
        for gift in gifts_data:
            if gift["–ø–æ–¥–∞—Ä–æ–∫"] not in selected_gifts and len(final_selection) < 2:
                final_selection.append({
                    "–º–µ—Å—Ç–æ": len(final_selection) + 1,
                    "–ø–æ–¥–∞—Ä–æ–∫": gift["–ø–æ–¥–∞—Ä–æ–∫"],
                    "–æ–ø–∏—Å–∞–Ω–∏–µ": gift["–æ–ø–∏—Å–∞–Ω–∏–µ"],
                    "—Å—Ç–æ–∏–º–æ—Å—Ç—å": gift["—Å—Ç–æ–∏–º–æ—Å—Ç—å"],
                    "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": gift["—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"],
                    "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
                    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
                    "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["–∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"],
                    "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
                })
    
    def _get_fallback_final_selection(self, gifts_data: List[Dict]) -> List[Dict[str, Any]]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä"""
        if gifts_data:
            return [{
                "–º–µ—Å—Ç–æ": 1,
                "–ø–æ–¥–∞—Ä–æ–∫": gifts_data[0]["–ø–æ–¥–∞—Ä–æ–∫"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": gifts_data[0]["–æ–ø–∏—Å–∞–Ω–∏–µ"],
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": gifts_data[0]["—Å—Ç–æ–∏–º–æ—Å—Ç—å"],
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": gifts_data[0]["—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"],
                "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
                "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["fallback_system"],
                "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
            }]
        else:
            return [{
                "–º–µ—Å—Ç–æ": 1,
                "–ø–æ–¥–∞—Ä–æ–∫": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–†–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 15000",
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7,
                "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
                "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_fallback"],
                "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
            }]

print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π LangGraph —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤")

"""
–Ø—á–µ–π–∫–∞ 11: ResultFormatter –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ LangGraph
–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ LangGraph —Å–∏—Å—Ç–µ–º—ã
"""

class ResultFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Jupyter Notebook"""
    
    @staticmethod
    def format_results(final_selection: List[Dict[str, Any]], gifts_data: List[GiftModel]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            final_selection: –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
            gifts_data: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        result = "\n" + "="*60 + "\n"
        result += "üéÅ LANGGRAPH –°–ò–°–¢–ï–ú–ê –í–´–ë–û–†–ê –ü–û–î–ê–†–ö–û–í - –†–ï–ó–£–õ–¨–¢–ê–¢–´\n"
        result += "="*60 + "\n\n"
        
        # –°–µ–∫—Ü–∏—è 1: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤
        result += "üìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:\n"
        result += "-" * 40 + "\n"
        for i, gift in enumerate(gifts_data, 1):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –æ–±—ä–µ–∫—Ç–æ–≤ GiftModel, —Ç–∞–∫ –∏ —Å–ª–æ–≤–∞—Ä–µ–π
            if hasattr(gift, '–ø–æ–¥–∞—Ä–æ–∫'):
                result += f"{i:2}. {gift.–ø–æ–¥–∞—Ä–æ–∫}\n"
                result += f"    üí∞ {gift.—Å—Ç–æ–∏–º–æ—Å—Ç—å}‚ÇΩ | ‚≠ê {gift.—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å}/10\n"
            else:
                result += f"{i:2}. {gift['–ø–æ–¥–∞—Ä–æ–∫']}\n"
                result += f"    üí∞ {gift['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}‚ÇΩ | ‚≠ê {gift['—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å']}/10\n"
        
        result += "\n" + "="*60 + "\n"
        result += "üèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –û–¢ LANGGRAPH –ò–ò-–ê–ì–ï–ù–¢–û–í\n"
        result += "="*60 + "\n\n"
        
        # –°–µ–∫—Ü–∏—è 2: –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for gift in final_selection:
            medal = "ü•á" if gift['–º–µ—Å—Ç–æ'] == 1 else "ü•à" if gift['–º–µ—Å—Ç–æ'] == 2 else "ü•â"
            result += f"{medal} –ú–ï–°–¢–û #{gift['–º–µ—Å—Ç–æ']}: {gift['–ø–æ–¥–∞—Ä–æ–∫']}\n"
            result += "-" * (len(gift['–ø–æ–¥–∞—Ä–æ–∫']) + 15) + "\n"
            result += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {gift['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n"
            result += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {gift['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}‚ÇΩ\n"
            result += f"‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {gift['—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å']}/10\n"
            result += f"üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ò–ò: {gift['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']}/100\n"
            result += f"üó≥Ô∏è  –ì–æ–ª–æ—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {gift['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤']}\n"
            result += f"ü§ñ –í—ã–±—Ä–∞–ª–∏ –∞–≥–µ–Ω—Ç—ã: {', '.join(gift['–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏'])}\n"
            
            # –î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if gift.get('–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫'):
                result += f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ LangGraph –∞–≥–µ–Ω—Ç–æ–≤:\n"
                for agent, score in gift['–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫']:
                    result += f"     ‚Ä¢ {agent}: {score}\n"
            
            result += "\n"
        
        result += "="*60 + "\n"
        result += "‚ú® LangGraph –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞! ‚ú®\n"
        result += "="*60 + "\n"
        
        return result
    
    @staticmethod
    def display_progress(step: str, details: str = ""):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è LangGraph"""
        print(f"üîÑ LangGraph: {step}")
        if details:
            print(f"   {details}")
    
    @staticmethod
    def display_agent_analysis(agent_type: str, chosen_gift: str, score: float):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ LangGraph –∞–≥–µ–Ω—Ç–∞"""
        print(f"ü§ñ LangGraph {agent_type}: –≤—ã–±—Ä–∞–ª '{chosen_gift}' (–æ—Ü–µ–Ω–∫–∞: {score:.1f})")

print("‚úÖ ResultFormatter –¥–ª—è LangGraph –≥–æ—Ç–æ–≤")

"""
–Ø—á–µ–π–∫–∞ 12: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ LangGraph (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–£–±—Ä–∞–Ω LangGraphWorkflowBuilder, –∫–æ–¥ —É–ø—Ä–æ—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
"""

async def run_neuro_gift_async(person_info: str) -> List[Dict[str, Any]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º LangGraph workflow
    
    Args:
        person_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∏–∑ 2 –ª—É—á—à–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = Configuration.from_env()
        logger.info(f"üîß LangGraph —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –º–æ–¥–µ–ª—å—é: {config.model}")
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ LangGraph —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤...")
        logger.info(f"üë§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {person_info[:100]}...")
        
        start_time = time.time()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow –Ω–∞–ø—Ä—è–º—É—é
        async with APIClient(config) as api_client:
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ LangGraph
            state = {
                "person_info": person_info,
                "gifts_data": [],
                "agent_responses": {},
                "final_selection": [],
                "current_step": "initialized",
                "error_messages": [],
                "execution_time": 0.0
            }
            
            # –≠–¢–ê–ü 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ (LangGraph —É–∑–µ–ª)
            logger.info("üìù LangGraph –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤")
            gift_generator = LangGraphGiftGenerator(api_client)
            state = await gift_generator.generate_gifts_node(state)
            
            if not state.get("gifts_data"):
                logger.error("‚ùå LangGraph: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏")
                raise Exception("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
            # –≠–¢–ê–ü 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–≥–µ–Ω—Ç–∞–º–∏ (LangGraph —É–∑–ª—ã)
            logger.info("ü§ñ LangGraph –≠—Ç–∞–ø 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–≥–µ–Ω—Ç–∞–º–∏")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            agents = []
            for agent_type in AgentType:
                agent = LangGraphAgent(agent_type, api_client)
                agents.append(agent)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            agent_tasks = []
            for agent in agents:
                task = agent.analyze_gifts_node(state)
                agent_tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            agent_results = await asyncio.gather(*agent_tasks, return_exceptions=True)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –≤ –µ–¥–∏–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            combined_agent_responses = {}
            for i, (agent, result) in enumerate(zip(agents, agent_results)):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå LangGraph: –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {agent.agent_type.value}: {result}")
                    continue
                
                agent_responses = result.get("agent_responses", {})
                combined_agent_responses.update(agent_responses)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            state = {
                **state,
                "agent_responses": combined_agent_responses
            }
            
            logger.info(f"‚úÖ LangGraph: –ü–æ–ª—É—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –æ—Ç {len(combined_agent_responses)} –∞–≥–µ–Ω—Ç–æ–≤")
            
            # –≠–¢–ê–ü 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä (LangGraph —É–∑–µ–ª)
            logger.info("üéØ LangGraph –≠—Ç–∞–ø 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä")
            selection_service = LangGraphGiftSelectionService(config)
            final_state = await selection_service.final_selection_node(state)
            
            execution_time = time.time() - start_time
            logger.info(f"‚è±Ô∏è LangGraph workflow –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            final_selection = final_state.get("final_selection", [])
            
            if final_selection:
                logger.info("üéâ LangGraph —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É!")
                return final_selection
            else:
                logger.warning("‚ö†Ô∏è LangGraph: –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return selection_service._get_fallback_final_selection(state.get("gifts_data", []))
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ LangGraph —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        logger.error(traceback.format_exc())
        
        # –í–æ–∑–≤—Ä–∞—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        return [{
            "–º–µ—Å—Ç–æ": 1,
            "–ø–æ–¥–∞—Ä–æ–∫": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)",
            "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–¥–∞—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ LangGraph",
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 15000",
            "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7,
            "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
            "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_langgraph_fallback"],
            "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
        }]

def run_neuro_gift(person_info: str) -> List[Dict[str, Any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è LangGraph —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        PersonInfoModel(info=person_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop (–∫–∞–∫ –≤ Jupyter)
        try:
            loop = asyncio.get_running_loop()
            logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º await")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º event loop
            import nest_asyncio
            nest_asyncio.apply()  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ event loops
            
            # –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run
            return asyncio.run(run_neuro_gift_async(person_info))
            
        except RuntimeError:
            # Event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run
            logger.info("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è LangGraph")
            return asyncio.run(run_neuro_gift_async(person_info))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π LangGraph –æ–±–µ—Ä—Ç–∫–µ: {str(e)}")
        return [{
            "–º–µ—Å—Ç–æ": 1,
            "–ø–æ–¥–∞—Ä–æ–∫": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫",
            "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–¥–∞—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ",
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 15000",
            "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7,
            "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
            "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_wrapper"],
            "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
        }]

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Jupyter —Å LangGraph
async def run_neuro_gift_jupyter(person_info: str) -> List[Dict[str, Any]]:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Jupyter Notebook —Å LangGraph
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Å await –≤ Jupyter
    """
    return await run_neuro_gift_async(person_info)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ LangGraph
async def test_langgraph_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LangGraph —Å–∏—Å—Ç–µ–º—ã"""
    test_profile = "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
    
    try:
        result = await run_neuro_gift_async(test_profile)
        print("‚úÖ LangGraph —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(result)}")
        return True
    except Exception as e:
        print(f"‚ùå LangGraph —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False

print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ LangGraph —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã")
print("üí° –î–ª—è Jupyter –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: await run_neuro_gift_jupyter('–ø—Ä–æ—Ñ–∏–ª—å')")
print("üîó –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π LangGraph workflow: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí –∞–≥–µ–Ω—Ç—ã (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ) ‚Üí —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä")
print("üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: await test_langgraph_system()")

"""
–Ø—á–µ–π–∫–∞ 13: LangGraph –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è Jupyter Notebook
"""

async def demo_run(person_info: str = None):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ LangGraph —Å–∏—Å—Ç–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤–≤–æ–¥–æ–º
    
    Args:
        person_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ (–µ—Å–ª–∏ None, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –≤–≤–æ–¥)
    """
    
    # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ—ë –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if person_info is None:
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø LANGGRAPH –°–ò–°–¢–ï–ú–´ –í–´–ë–û–†–ê –ü–û–î–ê–†–ö–û–í")
        print("=" * 60)
        print("üë§ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞")
        print("üí° –ü—Ä–∏–º–µ—Ä—ã: –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –≥–æ—Ä–æ–¥, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞, —Ö–æ–±–±–∏")
        print("-" * 60)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            person_info = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞: ")
            
            if not person_info or person_info.strip() == "":
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                person_info = None
                
        except (EOFError, KeyboardInterrupt):
            print("‚ö†Ô∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            person_info = None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            person_info = None
    
    # –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä
    if person_info is None:
        person_info = """
        –ú—É–∂—á–∏–Ω–∞ 37 –ª–µ—Ç, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–π –≤ –ú–æ—Å–∫–≤–µ.
        –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º, –∫–∏–Ω–æ, –º—É–∑—ã–∫–æ–π.
        –•–æ–¥–∏—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª –∏ –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å.
        –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –Ω–∞ Java.
        """
        print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è:")
    else:
        print("üìù –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω—è—Ç:")
    
    print(f"üë§ {person_info.strip()}")
    print("=" * 60)
    
    try:
        print("\nüöÄ –ó–ê–ü–£–°–ö LANGGRAPH –ê–ù–ê–õ–ò–ó–ê...")
        print("üîó Workflow: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí –ê–≥–µ–Ω—Ç—ã (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ) ‚Üí –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä")
        print("=" * 50)
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ LangGraph —Å–∏—Å—Ç–µ–º—ã
        final_selection = await run_neuro_gift_async(person_info)
        
        # –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - start_time
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if final_selection:
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
            demo_gifts = []
            for gift in final_selection:
                try:
                    demo_gifts.append(GiftModel(
                        –ø–æ–¥–∞—Ä–æ–∫=gift["–ø–æ–¥–∞—Ä–æ–∫"],
                        –æ–ø–∏—Å–∞–Ω–∏–µ=gift["–æ–ø–∏—Å–∞–Ω–∏–µ"],
                        —Å—Ç–æ–∏–º–æ—Å—Ç—å=gift["—Å—Ç–æ–∏–º–æ—Å—Ç—å"],
                        —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=gift["—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"]
                    ))
                except:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å GiftModel, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å
                    demo_gifts.append(gift)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
            formatted_result = ResultFormatter.format_results(final_selection, demo_gifts)
            print(formatted_result)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            print(f"‚è±Ô∏è LangGraph –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {len(AgentType)}")
            print(f"üéÅ –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(final_selection)}")
            print(f"üîó LangGraph —É–∑–ª–æ–≤: {2 + len(AgentType)} (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –∞–≥–µ–Ω—Ç—ã + —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä)")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ LangGraph")
        
        return final_selection
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ LangGraph –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É LangGraph")
        return []

async def demo_with_input():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
    """
    print("üéØ –í–í–û–î –ü–†–û–§–ò–õ–Ø –î–õ–Ø LANGGRAPH –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    print("üë§ –û–ø–∏—à–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫:")
    print("üí° –£–∫–∞–∂–∏—Ç–µ: –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –≥–æ—Ä–æ–¥, —Ä–∞–±–æ—Ç—É, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ö–æ–±–±–∏")
    print("üìù –ü—Ä–∏–º–µ—Ä: '–ñ–µ–Ω—â–∏–Ω–∞ 25 –ª–µ—Ç, –∂–∏–≤–µ—Ç –≤ –ú–æ—Å–∫–≤–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Ä–∞—á–æ–º, —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –π–æ–≥–æ–π –∏ —á—Ç–µ–Ω–∏–µ–º'")
    print("-" * 50)
    
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            person_info = input(f"–û–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): ")
            
            if person_info and person_info.strip():
                print(f"\n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {person_info.strip()}")
                return await demo_run(person_info.strip())
            else:
                print("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
        except (EOFError, KeyboardInterrupt):
            print(f"\n‚ö†Ô∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
            if attempt < max_attempts - 1:
                print("–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                continue
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    return await demo_run()

async def demo_multiline_input():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º –≤–≤–æ–¥–æ–º –ø—Ä–æ—Ñ–∏–ª—è
    """
    print("üéØ –ú–ù–û–ì–û–°–¢–†–û–ß–ù–´–ô –í–í–û–î –ü–†–û–§–ò–õ–Ø")
    print("=" * 40)
    print("üë§ –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞")
    print("üí° –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫")
    print("‚úÖ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ")
    print("-" * 40)
    
    lines = []
    line_count = 0
    
    try:
        while True:
            line_count += 1
            try:
                line = input(f"–°—Ç—Ä–æ–∫–∞ {line_count}: ")
                
                if line.strip() == "":
                    if lines:  # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                        break
                    else:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                        print("üí° –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ...")
                        line_count -= 1
                        continue
                        
                lines.append(line)
                
            except (EOFError, KeyboardInterrupt):
                print(f"\n‚ö†Ô∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ {line_count}")
                break
        
        if lines:
            person_info = "\n".join(lines)
            print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ ({len(lines)} —Å—Ç—Ä–æ–∫):")
            print(f"üë§ {person_info}")
            return await demo_run(person_info)
        else:
            print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {e}")
    
    print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    return await demo_run()

async def demo_preset_choice():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–ª–∏ –≤–≤–æ–¥–æ–º —Å–≤–æ–µ–≥–æ
    """
    presets = {
        "1": {
            "name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-–º—É–∂—á–∏–Ω–∞ 37 –ª–µ—Ç",
            "profile": """
            –ú—É–∂—á–∏–Ω–∞ 37 –ª–µ—Ç, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–π –≤ –ú–æ—Å–∫–≤–µ.
            –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º, –∫–∏–Ω–æ, –º—É–∑—ã–∫–æ–π.
            –•–æ–¥–∏—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª –∏ –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å.
            –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –Ω–∞ Java.
            """
        },
        "2": {
            "name": "–î–∏–∑–∞–π–Ω–µ—Ä-–∂–µ–Ω—â–∏–Ω–∞ 28 –ª–µ—Ç",
            "profile": """
            –ñ–µ–Ω—â–∏–Ω–∞ 28 –ª–µ—Ç, –∂–∏–≤–µ—Ç –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.
            –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –π–æ–≥–æ–π, —á—Ç–µ–Ω–∏–µ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.
            –†–∞–±–æ—Ç–∞–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º, –ª—é–±–∏—Ç –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
            """
        },
        "3": {
            "name": "–°—Ç—É–¥–µ–Ω—Ç 20 –ª–µ—Ç",
            "profile": """
            –°—Ç—É–¥–µ–Ω—Ç 20 –ª–µ—Ç, —É—á–∏—Ç—Å—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –≤ –ú–æ—Å–∫–≤–µ.
            –£–≤–ª–µ–∫–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º, –º—É–∑—ã–∫–æ–π, –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏.
            –õ—é–±–∏—Ç –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –¥—Ä—É–∑—å—è–º–∏.
            """
        },
        "4": {
            "name": "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä 65 –ª–µ—Ç",
            "profile": """
            –ú—É–∂—á–∏–Ω–∞ 65 –ª–µ—Ç, –Ω–∞ –ø–µ–Ω—Å–∏–∏, –∂–∏–≤–µ—Ç –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ.
            –£–≤–ª–µ–∫–∞–µ—Ç—Å—è —Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ–º, —á—Ç–µ–Ω–∏–µ–º, —Ä—ã–±–∞–ª–∫–æ–π, —à–∞—Ö–º–∞—Ç–∞–º–∏.
            –õ—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –≤–Ω—É–∫–∞–º–∏ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å–º—ã.
            """
        }
    }
    
    print("üéØ –í–´–ë–û–† –ü–†–û–§–ò–õ–Ø –î–õ–Ø LANGGRAPH –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:")
    
    for key, preset in presets.items():
        print(f"{key}. {preset['name']}")
    
    print("5. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    print("-" * 50)
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
        
        if choice in presets:
            selected_preset = presets[choice]
            print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {selected_preset['name']}")
            print(f"üë§ {selected_preset['profile'].strip()}")
            return await demo_run(selected_preset['profile'])
            
        elif choice == "5":
            print("\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞:")
            custom_profile = input("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ")
            if custom_profile.strip():
                return await demo_run(custom_profile.strip())
            else:
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä")
                return await demo_run(presets["1"]["profile"])
        else:
            print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä '{choice}', –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä")
            return await demo_run(presets["1"]["profile"])
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞: {e}")
        return await demo_run(presets["1"]["profile"])

async def quick_demo_async():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º –≤–≤–æ–¥–æ–º"""
    print("üöÄ –ë–´–°–¢–†–ê–Ø LANGGRAPH –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 50)
    
    try:
        person_info = input("üë§ –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞: ")
        
        if not person_info.strip():
            person_info = """
            –ñ–µ–Ω—â–∏–Ω–∞ 28 –ª–µ—Ç, –∂–∏–≤–µ—Ç –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.
            –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –π–æ–≥–æ–π, —á—Ç–µ–Ω–∏–µ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.
            –†–∞–±–æ—Ç–∞–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º, –ª—é–±–∏—Ç –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
            """
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        print(f"\nüìù LangGraph –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: {person_info.strip()}")
        print("-" * 50)
        
        result = await run_neuro_gift_async(person_info)
        
        print("\nüèÜ LANGGRAPH –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for gift in result:
            print(f"  üéÅ {gift['–º–µ—Å—Ç–æ']}. {gift['–ø–æ–¥–∞—Ä–æ–∫']}")
            print(f"     üí∞ {gift['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}‚ÇΩ")
            print(f"     ‚≠ê –û—Ü–µ–Ω–∫–∞: {gift['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']}/100")
            print(f"     ü§ñ –ê–≥–µ–Ω—Ç—ã: {', '.join(gift['–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏'])}")
            print()
        
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

print("‚úÖ LangGraph –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤–≤–æ–¥–æ–º –≥–æ—Ç–æ–≤—ã")
print("\nüìñ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–í–û–î–ê –ü–†–û–§–ò–õ–Ø:")
print("‚Ä¢ await demo_run() - —Å –ø–æ–ø—ã—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞")
print("‚Ä¢ await demo_with_input() - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞")
print("‚Ä¢ await demo_multiline_input() - –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥")
print("‚Ä¢ await demo_preset_choice() - –≤—ã–±–æ—Ä –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–ª–∏ —Å–≤–æ–π –≤–≤–æ–¥")
print("‚Ä¢ await quick_demo_async() - –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π")
print("‚Ä¢ await demo_run('–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å') - –ø—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–æ—Ñ–∏–ª—è")

"""
–Ø—á–µ–π–∫–∞ 14: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

def system_check():
   """
   –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
   """
   print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
   print("=" * 40)
   
   checks_passed = 0
   total_checks = 6
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: API —Ç–æ–∫–µ–Ω
   try:
       config = Configuration.from_env()
       print("‚úÖ 1. API —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
       print(f"   –ú–æ–¥–µ–ª—å: {config.model}")
       checks_passed += 1
   except Exception as e:
       print(f"‚ùå 1. –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞: {e}")
       print("   üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å OPEN_API_TOKEN=your_token_here")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ò–º–ø–æ—Ä—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫
   try:
       import aiohttp
       import pydantic
       print("‚úÖ 2. –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
       checks_passed += 1
   except ImportError as e:
       print(f"‚ùå 2. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {e}")
       print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiohttp pydantic python-dotenv")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
   try:
       test_gift = GiftModel(
           –ø–æ–¥–∞—Ä–æ–∫="–¢–µ—Å—Ç",
           –æ–ø–∏—Å–∞–Ω–∏–µ="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
           —Å—Ç–æ–∏–º–æ—Å—Ç—å="1000 - 2000",
           —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=5
       )
       print("‚úÖ 3. –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
       checks_passed += 1
   except Exception as e:
       print(f"‚ùå 3. –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: JSON –ø–∞—Ä—Å–µ—Ä
   try:
       test_json = '{"—Ç–µ—Å—Ç": "–∑–Ω–∞—á–µ–Ω–∏–µ", "—á–∏—Å–ª–æ": 42}'
       parsed = JSONParser.parse_json_response(test_json)
       print("‚úÖ 4. JSON –ø–∞—Ä—Å–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
       checks_passed += 1
   except Exception as e:
       print(f"‚ùå 4. –û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–µ—Ä–∞: {e}")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –¢–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤
   try:
       agents_count = len(AgentType)
       print(f"‚úÖ 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {agents_count} —Ç–∏–ø–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤")
       checks_passed += 1
   except Exception as e:
       print(f"‚ùå 5. –û—à–∏–±–∫–∞ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ü—Ä–æ–º–ø—Ç—ã
   try:
       test_prompt = PromptTemplate.get_agent_prompt(AgentType.PRAKTIK_BOT, "—Ç–µ—Å—Ç")
       if "JSON" in test_prompt:
           print("‚úÖ 6. –ü—Ä–æ–º–ø—Ç—ã —Å JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –≥–æ—Ç–æ–≤—ã")
           checks_passed += 1
       else:
           print("‚ùå 6. –ü—Ä–æ–º–ø—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
   except Exception as e:
       print(f"‚ùå 6. –û—à–∏–±–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
   
   # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   print("\n" + "=" * 40)
   if checks_passed == total_checks:
       print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
       print("\nüöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å:")
       print("   ‚Ä¢ await demo_run() - –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
       print("   ‚Ä¢ quick_demo() - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞")
       return True
   else:
       print(f"‚ö†Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ {checks_passed}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫")
       print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏—Å—Ç–µ–º—ã")
       return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —è—á–µ–π–∫–∏
try:
   CONFIG = Configuration.from_env()
   print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
   print("üìñ –ó–∞–ø—É—Å—Ç–∏—Ç–µ system_check() –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
except Exception as e:
   print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞")
   print(f"   –û—à–∏–±–∫–∞: {e}")
   print("üìñ –ó–∞–ø—É—Å—Ç–∏—Ç–µ system_check() –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
   
"""
–Ø—á–µ–π–∫–∞ 15: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
–ì–æ—Ç–æ–≤—ã–π –∫ –∑–∞–ø—É—Å–∫—É –∫–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
"""

# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
def init():
    print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã...")
    system_ready = system_check()

    if system_ready:
        print("\n" + "üéØ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò" + "\n" + "=" * 30)
    
    # –ü—Ä–∏–º–µ—Ä 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    try:
        # –î–ª—è Jupyter Notebook –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        result = demo_run()
        
        if result:
            print("\n‚ú® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            print("\nüéÅ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
            for gift in result:
                print(f"  {gift['–º–µ—Å—Ç–æ']}. {gift['–ø–æ–¥–∞—Ä–æ–∫']} - {gift['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']}/100 –±–∞–ª–ª–æ–≤")
                
        else:
            print("\n‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
        
        # Fallback: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        fallback_result = demo_preset_choice()
        if fallback_result:
            print("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    else:
        print("\nüõë –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ö–æ—Ç—è –±—ã –ø–æ–∫–∞–∑–∞—Ç—å fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        try:
            emergency_result = [{
                "–º–µ—Å—Ç–æ": 1,
                "–ø–æ–¥–∞—Ä–æ–∫": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (–∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ",
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "5000 - 15000",
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": 7,
                "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": 75.0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,
                "–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏": ["emergency_mode"],
                "–¥–µ—Ç–∞–ª–∏_–æ—Ü–µ–Ω–æ–∫": []
            }]
            print("üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - —Å–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        except:
            print("üí• –ü–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ —Å–∏—Å—Ç–µ–º—ã")


### –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
### –î–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è run_neuro_gift


if __name__ == "__main__":
    init()
    person_info = """
–ú—É–∂—á–∏–Ω–∞ 37 –ª–µ—Ç, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–π –≤ –ú–æ—Å–∫–≤–µ.
–£–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º, –∫–∏–Ω–æ, –º—É–∑—ã–∫–æ–π.
–•–æ–¥–∏—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª –∏ –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å.
–†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –Ω–∞ Java.
"""
    result = run_neuro_gift(person_info)
    print(result)
    

# –ê–≥–µ–Ω—Ç —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é
# def run_neuro_gift(user_text):
#     print("Run neuro gift")
#     asyncio.run(run_neuro_gift_async(user_text))