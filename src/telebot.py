from typing import TypedDict, Annotated, List, Dict, Any, Union
from io import BytesIO
import logging
from telegram import PhotoSize, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from telegram.constants import ParseMode
import urllib.parse
import traceback
from agent_context import AgentContext

# run agent
from agent5 import run_neuro_gift
import os

from dotenv import load_dotenv

# —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env

load_dotenv()
#print ("TELEGRAM_BOT_TOKEN")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


if None != TOKEN:
    print("Telegram token provided")
else:
    print("Telegram Token missed")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    await update.message.reply_text("""
üéÅ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ ‚Äú–ó–Ω–∞—é, —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å‚Äù
–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ, —Å –∑–∞–±–æ—Ç–æ–π –∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.

–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å—é—Ä–ø—Ä–∏–∑, –æ –µ–≥–æ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è—Ö. –° –º–µ–Ω—è - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ.                                    
""")

    
# –ö—Ä–∞—Å–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def string_results(final_selection):
    
    print(final_selection)
    
    result = ""
    for gift in final_selection:
        result += f"üéÅ –ú–ï–°–¢–û #{gift['–º–µ—Å—Ç–æ']}: {gift['–ø–æ–¥–∞—Ä–æ–∫']}\n"
        result += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {gift['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n"
        result += f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {gift['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}‚ÇΩ\n"
        result += f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {gift['—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å']}/10\n"
        try:
            result += f"   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –æ—Ç –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤: {gift['—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª']:.2f}\n"
            result += f"   –í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç–∞–º–∏: {', '.join(gift['–≤—ã–±—Ä–∞–Ω_–∞–≥–µ–Ω—Ç–∞–º–∏'])}\n"
        except:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            result += "   –í—ã–±—Ä–∞–Ω –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏\n"
            
        if 'query' in gift:
            query = urllib.parse.quote_plus(gift['query'])
            
            result += get_links(query)
        else:
            print(f"–ü–æ–¥–∞—Ä–æ–∫: {gift}")
        
        result += "\n"
    
    return result

def get_links(query):
    result = ""
    markets = [
        {
            "name" : "OZON",
            "link" : "https://www.ozon.ru/search/?text="
        },
        {
            "name" : "–Ø–Ω–¥–µ–∫—Å Market",
            "link" : "https://market.yandex.ru/search?text="
        },
    ]
    
    for market in markets:
        result += f"   –°—Å—ã–ª–∫–∞ –Ω–∞ <a href=\"{market['link'] + query}\">{market['name']}</a>\n"
        
        
    print(f"Links: {result}")    
    return result

def find_max_file(files: List[PhotoSize]) -> PhotoSize:
    if not files:
        return None
    
    max_file = files[0]  # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
    for file in files[1:]:
        if file.file_size > max_file.file_size:
            max_file = file
    return max_file

def get_max_files_by_id(files: List[PhotoSize]) -> List[PhotoSize]:
    max_files = {}
    
    for file in files:
        file_id = file.file_id
        size = file.file_size
        
        if file_id not in max_files or size > max_files[file_id]['size']:
            max_files[file_id] = file
    
    return list(max_files.values())

async def try_parse_photos(update: Update, context: CallbackContext) -> List[bytes]:
    try :
        result_list = []
        
        if update.message.photo != None:
            print(f"Parse photo: {len(update.message.photo)}")
            
            max_photos = [find_max_file(update.message.photo)]
            
            for photo in max_photos:
                
                print(f"Photo: {photo.file_id} {photo.file_size}")
                
                file = await context.bot.get_file(photo.file_id)
                print(f"File: {file} {type(file)}")
                f =  BytesIO(await file.download_as_bytearray())
                fbytes = f.getvalue()
                
                result_list.append(fbytes)
            
            return result_list
                
    except Exception:
        print(traceback.format_exc())
        print("Failed parse photo")
        return []
    
def print_files_info(files : List[bytes]) :
    for file in files:
        print(f"File: {len(file)}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º)
async def handle_message(update: Update, context: CallbackContext):
    # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(f"–í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º")

    try:
        user_input = update.message.text
        print(update.message.photo.count)
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        
        files = await try_parse_photos(update, context)
        print_files_info(files)
        
        context = AgentContext()
        context.person_info = user_input
        context.photos = files
        
        await call_agent(context, update)
        
    except Exception:
        print(traceback.format_exc())
        await update.message.reply_text(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")

async def call_agent(context: AgentContext, update: Update):
    #result = run_neuro_gift(context.person_info)
    #str_results = string_results(result)
    
    str_results = "Test"
    await update.message.reply_html(f"{str_results}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()